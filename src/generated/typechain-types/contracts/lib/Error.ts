/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";

export interface ErrorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALREADY_EXISTS"
      | "CANNOT_BE_SAME"
      | "CANNOT_BE_ZERO"
      | "CAN_N0T_BE_SLASHED"
      | "DOES_NOT_EXISTS"
      | "HAS_A_PENDING_WORK"
      | "INSUFFICIENT_REWARD"
      | "INVALID_GENERATOR"
      | "INVALID_PROOF"
      | "ONLY_ADMIN_CAN_CALL"
      | "ONLY_TO_IDLE_GENERATORS"
      | "ONLY_WORKING_GENERATORS"
      | "SHOULD_BE_IN_ASSIGNED_STATE"
      | "SHOULD_BE_IN_CREATE_STATE"
      | "SHOULD_BE_IN_CROSSED_DEADLINE_STATE"
      | "SHOULD_BE_IN_EXPIRED_STATE"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ALREADY_EXISTS", values?: undefined): string;
  encodeFunctionData(functionFragment: "CANNOT_BE_SAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "CANNOT_BE_ZERO", values?: undefined): string;
  encodeFunctionData(functionFragment: "CAN_N0T_BE_SLASHED", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOES_NOT_EXISTS", values?: undefined): string;
  encodeFunctionData(functionFragment: "HAS_A_PENDING_WORK", values?: undefined): string;
  encodeFunctionData(functionFragment: "INSUFFICIENT_REWARD", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVALID_GENERATOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVALID_PROOF", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONLY_ADMIN_CAN_CALL", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONLY_TO_IDLE_GENERATORS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONLY_WORKING_GENERATORS", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_ASSIGNED_STATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_CREATE_STATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_CROSSED_DEADLINE_STATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_EXPIRED_STATE", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ALREADY_EXISTS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CANNOT_BE_SAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CANNOT_BE_ZERO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAN_N0T_BE_SLASHED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOES_NOT_EXISTS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HAS_A_PENDING_WORK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INSUFFICIENT_REWARD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVALID_GENERATOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVALID_PROOF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONLY_ADMIN_CAN_CALL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONLY_TO_IDLE_GENERATORS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONLY_WORKING_GENERATORS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_ASSIGNED_STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_CREATE_STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_CROSSED_DEADLINE_STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_EXPIRED_STATE", data: BytesLike): Result;
}

export interface Error extends BaseContract {
  connect(runner?: ContractRunner | null): Error;
  waitForDeployment(): Promise<this>;

  interface: ErrorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  ALREADY_EXISTS: TypedContractMethod<[], [string], "view">;

  CANNOT_BE_SAME: TypedContractMethod<[], [string], "view">;

  CANNOT_BE_ZERO: TypedContractMethod<[], [string], "view">;

  CAN_N0T_BE_SLASHED: TypedContractMethod<[], [string], "view">;

  DOES_NOT_EXISTS: TypedContractMethod<[], [string], "view">;

  HAS_A_PENDING_WORK: TypedContractMethod<[], [string], "view">;

  INSUFFICIENT_REWARD: TypedContractMethod<[], [string], "view">;

  INVALID_GENERATOR: TypedContractMethod<[], [string], "view">;

  INVALID_PROOF: TypedContractMethod<[], [string], "view">;

  ONLY_ADMIN_CAN_CALL: TypedContractMethod<[], [string], "view">;

  ONLY_TO_IDLE_GENERATORS: TypedContractMethod<[], [string], "view">;

  ONLY_WORKING_GENERATORS: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_ASSIGNED_STATE: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_CREATE_STATE: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_CROSSED_DEADLINE_STATE: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_EXPIRED_STATE: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "ALREADY_EXISTS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CANNOT_BE_SAME"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CANNOT_BE_ZERO"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CAN_N0T_BE_SLASHED"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "DOES_NOT_EXISTS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "HAS_A_PENDING_WORK"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INSUFFICIENT_REWARD"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INVALID_GENERATOR"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INVALID_PROOF"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ONLY_ADMIN_CAN_CALL"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ONLY_TO_IDLE_GENERATORS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ONLY_WORKING_GENERATORS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_ASSIGNED_STATE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_CREATE_STATE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_CROSSED_DEADLINE_STATE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_EXPIRED_STATE"): TypedContractMethod<[], [string], "view">;

  filters: {};
}
