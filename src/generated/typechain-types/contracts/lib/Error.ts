/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";

export interface ErrorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALREADY_COMPLETE"
      | "ALREADY_EXISTS"
      | "ARITY_MISMATCH"
      | "CANNOT_BE_ADMIN_LESS"
      | "CANNOT_BE_SAME"
      | "CANNOT_BE_ZERO"
      | "CANT_BE_IN_PAST"
      | "CAN_N0T_BE_SLASHED"
      | "CAN_NOT_DEREGISTER_WITH_ACTIVE_MARKET"
      | "CAN_NOT_GRANT_ROLE_WITHOUT_ATTESTATION"
      | "DOES_NOT_EXISTS"
      | "ENCLAVE_KEY_NOT_VERIFIED"
      | "HAS_A_PENDING_WORK"
      | "INSUFFICIENT_GENERATOR_CAPACITY"
      | "INSUFFICIENT_REWARD"
      | "INSUFFICIENT_STAKE"
      | "INVALID_GENERATOR"
      | "INVALID_INPUTS"
      | "INVALID_PROOF"
      | "INVAlID_SENDER"
      | "ONLY_ADMIN_CAN_CALL"
      | "ONLY_TASKS_GENERATOR"
      | "ONLY_TO_IDLE_GENERATORS"
      | "ONLY_WORKING_GENERATORS"
      | "PROOF_REQUESTED_IN_LESS_TIME"
      | "SHOULD_BE_CREATED"
      | "SHOULD_BE_IN_ASSIGNED_STATE"
      | "SHOULD_BE_IN_CREATE_STATE"
      | "SHOULD_BE_IN_CROSSED_DEADLINE_STATE"
      | "SHOULD_BE_IN_EXPIRED_STATE"
      | "SHOULD_BE_LESS_THAN_OR_EQUAL"
      | "SHOULD_BE_SAME",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ALREADY_COMPLETE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ALREADY_EXISTS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ARITY_MISMATCH", values?: undefined): string;
  encodeFunctionData(functionFragment: "CANNOT_BE_ADMIN_LESS", values?: undefined): string;
  encodeFunctionData(functionFragment: "CANNOT_BE_SAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "CANNOT_BE_ZERO", values?: undefined): string;
  encodeFunctionData(functionFragment: "CANT_BE_IN_PAST", values?: undefined): string;
  encodeFunctionData(functionFragment: "CAN_N0T_BE_SLASHED", values?: undefined): string;
  encodeFunctionData(functionFragment: "CAN_NOT_DEREGISTER_WITH_ACTIVE_MARKET", values?: undefined): string;
  encodeFunctionData(functionFragment: "CAN_NOT_GRANT_ROLE_WITHOUT_ATTESTATION", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOES_NOT_EXISTS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ENCLAVE_KEY_NOT_VERIFIED", values?: undefined): string;
  encodeFunctionData(functionFragment: "HAS_A_PENDING_WORK", values?: undefined): string;
  encodeFunctionData(functionFragment: "INSUFFICIENT_GENERATOR_CAPACITY", values?: undefined): string;
  encodeFunctionData(functionFragment: "INSUFFICIENT_REWARD", values?: undefined): string;
  encodeFunctionData(functionFragment: "INSUFFICIENT_STAKE", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVALID_GENERATOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVALID_INPUTS", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVALID_PROOF", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVAlID_SENDER", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONLY_ADMIN_CAN_CALL", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONLY_TASKS_GENERATOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONLY_TO_IDLE_GENERATORS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONLY_WORKING_GENERATORS", values?: undefined): string;
  encodeFunctionData(functionFragment: "PROOF_REQUESTED_IN_LESS_TIME", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_CREATED", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_ASSIGNED_STATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_CREATE_STATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_CROSSED_DEADLINE_STATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_IN_EXPIRED_STATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_LESS_THAN_OR_EQUAL", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHOULD_BE_SAME", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ALREADY_COMPLETE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ALREADY_EXISTS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ARITY_MISMATCH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CANNOT_BE_ADMIN_LESS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CANNOT_BE_SAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CANNOT_BE_ZERO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CANT_BE_IN_PAST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAN_N0T_BE_SLASHED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAN_NOT_DEREGISTER_WITH_ACTIVE_MARKET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAN_NOT_GRANT_ROLE_WITHOUT_ATTESTATION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOES_NOT_EXISTS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ENCLAVE_KEY_NOT_VERIFIED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HAS_A_PENDING_WORK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INSUFFICIENT_GENERATOR_CAPACITY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INSUFFICIENT_REWARD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INSUFFICIENT_STAKE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVALID_GENERATOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVALID_INPUTS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVALID_PROOF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVAlID_SENDER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONLY_ADMIN_CAN_CALL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONLY_TASKS_GENERATOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONLY_TO_IDLE_GENERATORS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONLY_WORKING_GENERATORS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PROOF_REQUESTED_IN_LESS_TIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_CREATED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_ASSIGNED_STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_CREATE_STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_CROSSED_DEADLINE_STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_IN_EXPIRED_STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_LESS_THAN_OR_EQUAL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHOULD_BE_SAME", data: BytesLike): Result;
}

export interface Error extends BaseContract {
  connect(runner?: ContractRunner | null): Error;
  waitForDeployment(): Promise<this>;

  interface: ErrorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  ALREADY_COMPLETE: TypedContractMethod<[], [string], "view">;

  ALREADY_EXISTS: TypedContractMethod<[], [string], "view">;

  ARITY_MISMATCH: TypedContractMethod<[], [string], "view">;

  CANNOT_BE_ADMIN_LESS: TypedContractMethod<[], [string], "view">;

  CANNOT_BE_SAME: TypedContractMethod<[], [string], "view">;

  CANNOT_BE_ZERO: TypedContractMethod<[], [string], "view">;

  CANT_BE_IN_PAST: TypedContractMethod<[], [string], "view">;

  CAN_N0T_BE_SLASHED: TypedContractMethod<[], [string], "view">;

  CAN_NOT_DEREGISTER_WITH_ACTIVE_MARKET: TypedContractMethod<[], [string], "view">;

  CAN_NOT_GRANT_ROLE_WITHOUT_ATTESTATION: TypedContractMethod<[], [string], "view">;

  DOES_NOT_EXISTS: TypedContractMethod<[], [string], "view">;

  ENCLAVE_KEY_NOT_VERIFIED: TypedContractMethod<[], [string], "view">;

  HAS_A_PENDING_WORK: TypedContractMethod<[], [string], "view">;

  INSUFFICIENT_GENERATOR_CAPACITY: TypedContractMethod<[], [string], "view">;

  INSUFFICIENT_REWARD: TypedContractMethod<[], [string], "view">;

  INSUFFICIENT_STAKE: TypedContractMethod<[], [string], "view">;

  INVALID_GENERATOR: TypedContractMethod<[], [string], "view">;

  INVALID_INPUTS: TypedContractMethod<[], [string], "view">;

  INVALID_PROOF: TypedContractMethod<[], [string], "view">;

  INVAlID_SENDER: TypedContractMethod<[], [string], "view">;

  ONLY_ADMIN_CAN_CALL: TypedContractMethod<[], [string], "view">;

  ONLY_TASKS_GENERATOR: TypedContractMethod<[], [string], "view">;

  ONLY_TO_IDLE_GENERATORS: TypedContractMethod<[], [string], "view">;

  ONLY_WORKING_GENERATORS: TypedContractMethod<[], [string], "view">;

  PROOF_REQUESTED_IN_LESS_TIME: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_CREATED: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_ASSIGNED_STATE: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_CREATE_STATE: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_CROSSED_DEADLINE_STATE: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_IN_EXPIRED_STATE: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_LESS_THAN_OR_EQUAL: TypedContractMethod<[], [string], "view">;

  SHOULD_BE_SAME: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "ALREADY_COMPLETE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ALREADY_EXISTS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ARITY_MISMATCH"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CANNOT_BE_ADMIN_LESS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CANNOT_BE_SAME"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CANNOT_BE_ZERO"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CANT_BE_IN_PAST"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CAN_N0T_BE_SLASHED"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CAN_NOT_DEREGISTER_WITH_ACTIVE_MARKET"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "CAN_NOT_GRANT_ROLE_WITHOUT_ATTESTATION"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "DOES_NOT_EXISTS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ENCLAVE_KEY_NOT_VERIFIED"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "HAS_A_PENDING_WORK"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INSUFFICIENT_GENERATOR_CAPACITY"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INSUFFICIENT_REWARD"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INSUFFICIENT_STAKE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INVALID_GENERATOR"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INVALID_INPUTS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INVALID_PROOF"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "INVAlID_SENDER"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ONLY_ADMIN_CAN_CALL"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ONLY_TASKS_GENERATOR"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ONLY_TO_IDLE_GENERATORS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ONLY_WORKING_GENERATORS"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "PROOF_REQUESTED_IN_LESS_TIME"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_CREATED"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_ASSIGNED_STATE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_CREATE_STATE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_CROSSED_DEADLINE_STATE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_IN_EXPIRED_STATE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_LESS_THAN_OR_EQUAL"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "SHOULD_BE_SAME"): TypedContractMethod<[], [string], "view">;

  filters: {};
}
