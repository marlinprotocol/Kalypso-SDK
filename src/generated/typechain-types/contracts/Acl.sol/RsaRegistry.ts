/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RsaRegistryInterface extends Interface {
  getFunction(nameOrSignature: "proofMarketPlace" | "rsa_pub_key" | "rsa_pub_key_hash" | "updatePubkey"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UpdateRSA"): EventFragment;

  encodeFunctionData(functionFragment: "proofMarketPlace", values?: undefined): string;
  encodeFunctionData(functionFragment: "rsa_pub_key", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "rsa_pub_key_hash", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "updatePubkey", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "proofMarketPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rsa_pub_key", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rsa_pub_key_hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePubkey", data: BytesLike): Result;
}

export namespace UpdateRSAEvent {
  export type InputTuple = [user: AddressLike, rsa_pub_hash: BytesLike];
  export type OutputTuple = [user: string, rsa_pub_hash: string];
  export interface OutputObject {
    user: string;
    rsa_pub_hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RsaRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): RsaRegistry;
  waitForDeployment(): Promise<this>;

  interface: RsaRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  proofMarketPlace: TypedContractMethod<[], [string], "view">;

  rsa_pub_key: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  rsa_pub_key_hash: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  updatePubkey: TypedContractMethod<[rsa_pub: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "proofMarketPlace"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "rsa_pub_key"): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(nameOrSignature: "rsa_pub_key_hash"): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(nameOrSignature: "updatePubkey"): TypedContractMethod<[rsa_pub: BytesLike], [void], "nonpayable">;

  getEvent(key: "UpdateRSA"): TypedContractEvent<UpdateRSAEvent.InputTuple, UpdateRSAEvent.OutputTuple, UpdateRSAEvent.OutputObject>;

  filters: {
    "UpdateRSA(address,bytes32)": TypedContractEvent<UpdateRSAEvent.InputTuple, UpdateRSAEvent.OutputTuple, UpdateRSAEvent.OutputObject>;
    UpdateRSA: TypedContractEvent<UpdateRSAEvent.InputTuple, UpdateRSAEvent.OutputTuple, UpdateRSAEvent.OutputObject>;
  };
}
