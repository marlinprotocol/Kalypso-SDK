/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";

export interface PrivateInputRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "addPrivateInputs" | "complete" | "completeInputs" | "privateInputLength" | "privateInputs" | "proofMarketPlace"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addPrivateInputs", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "complete", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "completeInputs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "privateInputLength", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "privateInputs", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "proofMarketPlace", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addPrivateInputs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "completeInputs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "privateInputLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "privateInputs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofMarketPlace", data: BytesLike): Result;
}

export interface PrivateInputRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateInputRegistry;
  waitForDeployment(): Promise<this>;

  interface: PrivateInputRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  addPrivateInputs: TypedContractMethod<[askId: BigNumberish, privInputs: BytesLike], [void], "nonpayable">;

  complete: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  completeInputs: TypedContractMethod<[askId: BigNumberish], [void], "nonpayable">;

  privateInputLength: TypedContractMethod<[askId: BigNumberish], [bigint], "view">;

  privateInputs: TypedContractMethod<[arg0: BigNumberish, arg1: BigNumberish], [string], "view">;

  proofMarketPlace: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "addPrivateInputs"): TypedContractMethod<[askId: BigNumberish, privInputs: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "complete"): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(nameOrSignature: "completeInputs"): TypedContractMethod<[askId: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "privateInputLength"): TypedContractMethod<[askId: BigNumberish], [bigint], "view">;
  getFunction(nameOrSignature: "privateInputs"): TypedContractMethod<[arg0: BigNumberish, arg1: BigNumberish], [string], "view">;
  getFunction(nameOrSignature: "proofMarketPlace"): TypedContractMethod<[], [string], "view">;

  filters: {};
}
