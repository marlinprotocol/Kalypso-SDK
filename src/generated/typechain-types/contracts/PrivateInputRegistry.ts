/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PrivateInputRegistryInterface extends Interface {
  getFunction(nameOrSignature: "addPrivateInputs" | "privateInputs" | "proofMarketPlace"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AddPrivateInputs"): EventFragment;

  encodeFunctionData(functionFragment: "addPrivateInputs", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "privateInputs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "proofMarketPlace", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addPrivateInputs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "privateInputs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofMarketPlace", data: BytesLike): Result;
}

export namespace AddPrivateInputsEvent {
  export type InputTuple = [askId: BigNumberish];
  export type OutputTuple = [askId: bigint];
  export interface OutputObject {
    askId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivateInputRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateInputRegistry;
  waitForDeployment(): Promise<this>;

  interface: PrivateInputRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  addPrivateInputs: TypedContractMethod<[askId: BigNumberish, privInputs: BytesLike], [void], "nonpayable">;

  privateInputs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  proofMarketPlace: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "addPrivateInputs"): TypedContractMethod<[askId: BigNumberish, privInputs: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "privateInputs"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(nameOrSignature: "proofMarketPlace"): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddPrivateInputs"
  ): TypedContractEvent<AddPrivateInputsEvent.InputTuple, AddPrivateInputsEvent.OutputTuple, AddPrivateInputsEvent.OutputObject>;

  filters: {
    "AddPrivateInputs(uint256)": TypedContractEvent<
      AddPrivateInputsEvent.InputTuple,
      AddPrivateInputsEvent.OutputTuple,
      AddPrivateInputsEvent.OutputObject
    >;
    AddPrivateInputs: TypedContractEvent<
      AddPrivateInputsEvent.InputTuple,
      AddPrivateInputsEvent.OutputTuple,
      AddPrivateInputsEvent.OutputObject
    >;
  };
}
