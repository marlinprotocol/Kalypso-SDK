/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGeneratorRegistry,
  IGeneratorRegistryInterface,
} from "../../../../contracts/interfaces/IGeneratorRegsitry.sol/IGeneratorRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AddExtraStash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "DeregisteredGenerator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "RegisteredGenerator",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "assignGeneratorTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "completeGeneratorTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "deregister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "getGeneratorDetails",
    outputs: [
      {
        internalType: "enum IGeneratorRegistry.GeneratorState",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "rewardAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountLocked",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minReward",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "generatorData",
            type: "bytes",
          },
        ],
        internalType: "struct IGeneratorRegistry.Generator",
        name: "generator",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "rewardAddress",
        type: "address",
      },
    ],
    name: "slashGenerator",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IGeneratorRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IGeneratorRegistryInterface {
    return new Interface(_abi) as IGeneratorRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGeneratorRegistry {
    return new Contract(address, _abi, runner) as unknown as IGeneratorRegistry;
  }
}
