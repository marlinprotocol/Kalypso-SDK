/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Transfer_verifier_wrapper,
  Transfer_verifier_wrapperInterface,
} from "../../../../contracts/verifierWrappers/transfer_verifier_wrapper.sol/Transfer_verifier_wrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract i_transfer_verifier",
        name: "_iverifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[5]",
        name: "inputs",
        type: "uint256[5]",
      },
      {
        internalType: "uint256[8]",
        name: "proof",
        type: "uint256[8]",
      },
    ],
    name: "encodeInputAndProofForVerification",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[5]",
        name: "inputs",
        type: "uint256[5]",
      },
    ],
    name: "encodeInputs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "proof",
        type: "uint256[8]",
      },
    ],
    name: "encodeProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "iverifier",
    outputs: [
      {
        internalType: "contract i_transfer_verifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedData",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "inputs",
        type: "bytes",
      },
    ],
    name: "verifyInputs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161084938038061084983398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107b86100916000396000818160f101526101bd01526107b86000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806364f1bcc7146100675780638e760afe146100905780639966599f146100b3578063a6dfbc7f146100c6578063dfd4ac1b146100d9578063e7f5b81d146100ec575b600080fd5b61007a61007536600461039a565b61012b565b6040516100879190610404565b60405180910390f35b6100a361009e366004610417565b610154565b6040519015158152602001610087565b61007a6100c13660046104b4565b610242565b6100a36100d4366004610417565b61027e565b61007a6100e73660046104ea565b610296565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610087565b60608160405160200161013e919061052f565b6040516020818303038152906040529050919050565b600061015e6102a9565b6101666102c7565b600080610175868801886105cb565b915091508180602001905181019061018d919061062f565b9350808060200190518101906101a39190610684565b6040516368444dc760e01b81529093506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906368444dc7906101f49087908790600401610708565b602060405180830381865afa158015610211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102359190610724565b9450505050505b92915050565b606061024d83610296565b6102568361012b565b604051602001610267929190610746565b604051602081830303815290604052905092915050565b600061028c828401846104ea565b5060019392505050565b60608160405160200161013e9190610774565b6040518060a001604052806005906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610320576103206102e6565b60405290565b60405160a0810167ffffffffffffffff81118282101715610320576103206102e6565b600082601f83011261035a57600080fd5b6103626102fc565b8061010084018581111561037557600080fd5b845b8181101561038f578035845260209384019301610377565b509095945050505050565b600061010082840312156103ad57600080fd5b6103b78383610349565b9392505050565b6000815180845260005b818110156103e4576020818501810151868301820152016103c8565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006103b760208301846103be565b6000806020838503121561042a57600080fd5b823567ffffffffffffffff8082111561044257600080fd5b818501915085601f83011261045657600080fd5b81358181111561046557600080fd5b86602082850101111561047757600080fd5b60209290920196919550909350505050565b600082601f83011261049a57600080fd5b6104a2610326565b8060a084018581111561037557600080fd5b6000806101a083850312156104c857600080fd5b6104d28484610489565b91506104e18460a08501610349565b90509250929050565b600060a082840312156104fc57600080fd5b6103b78383610489565b8060005b600881101561052957815184526020938401939091019060010161050a565b50505050565b610100810161023c8284610506565b600082601f83011261054f57600080fd5b813567ffffffffffffffff8082111561056a5761056a6102e6565b604051601f8301601f19908116603f01168101908282118183101715610592576105926102e6565b816040528381528660208588010111156105ab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156105de57600080fd5b823567ffffffffffffffff808211156105f657600080fd5b6106028683870161053e565b9350602085013591508082111561061857600080fd5b506106258582860161053e565b9150509250929050565b600060a0828403121561064157600080fd5b82601f83011261065057600080fd5b610658610326565b8060a084018581111561066a57600080fd5b845b8181101561038f57805184526020938401930161066c565b600061010080838503121561069857600080fd5b83601f8401126106a757600080fd5b6106af6102fc565b9083019080858311156106c157600080fd5b845b838110156106db5780518352602092830192016106c3565b5095945050505050565b8060005b60058110156105295781518452602093840193909101906001016106e9565b6101a0810161071782856106e5565b6103b760a0830184610506565b60006020828403121561073657600080fd5b815180151581146103b757600080fd5b60408152600061075960408301856103be565b828103602084015261076b81856103be565b95945050505050565b60a0810161023c82846106e556fea264697066735822122016099c603e232e0dd5e56ba781ec107e86ffbedf557160381c7402cbfe2e89d064736f6c63430008130033";

type Transfer_verifier_wrapperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: Transfer_verifier_wrapperConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transfer_verifier_wrapper__factory extends ContractFactory {
  constructor(...args: Transfer_verifier_wrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _iverifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_iverifier, overrides || {});
  }
  override deploy(_iverifier: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(_iverifier, overrides || {}) as Promise<
      Transfer_verifier_wrapper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Transfer_verifier_wrapper__factory {
    return super.connect(runner) as Transfer_verifier_wrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transfer_verifier_wrapperInterface {
    return new Interface(_abi) as Transfer_verifier_wrapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Transfer_verifier_wrapper {
    return new Contract(address, _abi, runner) as unknown as Transfer_verifier_wrapper;
  }
}
