/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Plonk_verifier_wrapper,
  Plonk_verifier_wrapperInterface,
} from "../../../../contracts/verifierWrappers/plonk_vk_wrapper.sol/Plonk_verifier_wrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract i_plonk_vk",
        name: "_iverifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "inputs",
        type: "bytes32[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "encodeInputAndProofForVerification",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "inputs",
        type: "bytes32[]",
      },
    ],
    name: "encodeInputs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "encodeProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "iverifier",
    outputs: [
      {
        internalType: "contract i_plonk_vk",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedData",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "inputs",
        type: "bytes",
      },
    ],
    name: "verifyInputs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610de0380380610de0833981810160405281019061003291906100e1565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b60006100ae82610091565b9050919050565b6100be816100a3565b81146100c957600080fd5b50565b6000815190506100db816100b5565b92915050565b6000602082840312156100f7576100f661006c565b5b6000610105848285016100cc565b91505092915050565b608051610cb06101306000396000818161024c01526103100152610cb06000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633fa0cfbf146100675780634cff91251461009757806370f9dfca146100c75780638e760afe146100f7578063a6dfbc7f14610127578063e7f5b81d14610157575b600080fd5b610081600480360381019061007c91906104d5565b610175565b60405161008e919061059d565b60405180910390f35b6100b160048036038101906100ac9190610674565b61019e565b6040516100be919061059d565b60405180910390f35b6100e160048036038101906100dc91906106bd565b6101c7565b6040516100ee919061059d565b60405180910390f35b610111600480360381019061010c9190610790565b610203565b60405161011e91906107f8565b60405180910390f35b610141600480360381019061013c9190610790565b6102f2565b60405161014e91906107f8565b60405180910390f35b61015f61030e565b60405161016c9190610892565b60405180910390f35b606081604051602001610188919061096b565b6040516020818303038152906040529050919050565b6060816040516020016101b1919061059d565b6040516020818303038152906040529050919050565b60606101d283610175565b6101db8361019e565b6040516020016101ec92919061098d565b604051602081830303815290604052905092915050565b6000606080600080868681019061021a91906109c4565b91509150818060200190518101906102329190610ae8565b9350808060200190518101906102489190610ba1565b92507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea50d0e484866040518363ffffffff1660e01b81526004016102a5929190610bea565b602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610c4d565b94505050505092915050565b6000828281019061030391906104d5565b506001905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103948261034b565b810181811067ffffffffffffffff821117156103b3576103b261035c565b5b80604052505050565b60006103c6610332565b90506103d2828261038b565b919050565b600067ffffffffffffffff8211156103f2576103f161035c565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61041b81610408565b811461042657600080fd5b50565b60008135905061043881610412565b92915050565b600061045161044c846103d7565b6103bc565b9050808382526020820190506020840283018581111561047457610473610403565b5b835b8181101561049d57806104898882610429565b845260208401935050602081019050610476565b5050509392505050565b600082601f8301126104bc576104bb610346565b5b81356104cc84826020860161043e565b91505092915050565b6000602082840312156104eb576104ea61033c565b5b600082013567ffffffffffffffff81111561050957610508610341565b5b610515848285016104a7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561055857808201518184015260208101905061053d565b60008484015250505050565b600061056f8261051e565b6105798185610529565b935061058981856020860161053a565b6105928161034b565b840191505092915050565b600060208201905081810360008301526105b78184610564565b905092915050565b600080fd5b600067ffffffffffffffff8211156105df576105de61035c565b5b6105e88261034b565b9050602081019050919050565b82818337600083830152505050565b6000610617610612846105c4565b6103bc565b905082815260208101848484011115610633576106326105bf565b5b61063e8482856105f5565b509392505050565b600082601f83011261065b5761065a610346565b5b813561066b848260208601610604565b91505092915050565b60006020828403121561068a5761068961033c565b5b600082013567ffffffffffffffff8111156106a8576106a7610341565b5b6106b484828501610646565b91505092915050565b600080604083850312156106d4576106d361033c565b5b600083013567ffffffffffffffff8111156106f2576106f1610341565b5b6106fe858286016104a7565b925050602083013567ffffffffffffffff81111561071f5761071e610341565b5b61072b85828601610646565b9150509250929050565b600080fd5b60008083601f8401126107505761074f610346565b5b8235905067ffffffffffffffff81111561076d5761076c610735565b5b60208301915083600182028301111561078957610788610403565b5b9250929050565b600080602083850312156107a7576107a661033c565b5b600083013567ffffffffffffffff8111156107c5576107c4610341565b5b6107d18582860161073a565b92509250509250929050565b60008115159050919050565b6107f2816107dd565b82525050565b600060208201905061080d60008301846107e9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061085861085361084e84610813565b610833565b610813565b9050919050565b600061086a8261083d565b9050919050565b600061087c8261085f565b9050919050565b61088c81610871565b82525050565b60006020820190506108a76000830184610883565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6108e281610408565b82525050565b60006108f483836108d9565b60208301905092915050565b6000602082019050919050565b6000610918826108ad565b61092281856108b8565b935061092d836108c9565b8060005b8381101561095e57815161094588826108e8565b975061095083610900565b925050600181019050610931565b5085935050505092915050565b60006020820190508181036000830152610985818461090d565b905092915050565b600060408201905081810360008301526109a78185610564565b905081810360208301526109bb8184610564565b90509392505050565b600080604083850312156109db576109da61033c565b5b600083013567ffffffffffffffff8111156109f9576109f8610341565b5b610a0585828601610646565b925050602083013567ffffffffffffffff811115610a2657610a25610341565b5b610a3285828601610646565b9150509250929050565b600081519050610a4b81610412565b92915050565b6000610a64610a5f846103d7565b6103bc565b90508083825260208201905060208402830185811115610a8757610a86610403565b5b835b81811015610ab05780610a9c8882610a3c565b845260208401935050602081019050610a89565b5050509392505050565b600082601f830112610acf57610ace610346565b5b8151610adf848260208601610a51565b91505092915050565b600060208284031215610afe57610afd61033c565b5b600082015167ffffffffffffffff811115610b1c57610b1b610341565b5b610b2884828501610aba565b91505092915050565b6000610b44610b3f846105c4565b6103bc565b905082815260208101848484011115610b6057610b5f6105bf565b5b610b6b84828561053a565b509392505050565b600082601f830112610b8857610b87610346565b5b8151610b98848260208601610b31565b91505092915050565b600060208284031215610bb757610bb661033c565b5b600082015167ffffffffffffffff811115610bd557610bd4610341565b5b610be184828501610b73565b91505092915050565b60006040820190508181036000830152610c048185610564565b90508181036020830152610c18818461090d565b90509392505050565b610c2a816107dd565b8114610c3557600080fd5b50565b600081519050610c4781610c21565b92915050565b600060208284031215610c6357610c6261033c565b5b6000610c7184828501610c38565b9150509291505056fea264697066735822122069dcfd230127073777346aebdc144c4861d0949572869b33bc68a0051bb34abc64736f6c63430008130033";

type Plonk_verifier_wrapperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: Plonk_verifier_wrapperConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Plonk_verifier_wrapper__factory extends ContractFactory {
  constructor(...args: Plonk_verifier_wrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _iverifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_iverifier, overrides || {});
  }
  override deploy(_iverifier: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(_iverifier, overrides || {}) as Promise<
      Plonk_verifier_wrapper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Plonk_verifier_wrapper__factory {
    return super.connect(runner) as Plonk_verifier_wrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Plonk_verifier_wrapperInterface {
    return new Interface(_abi) as Plonk_verifier_wrapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Plonk_verifier_wrapper {
    return new Contract(address, _abi, runner) as unknown as Plonk_verifier_wrapper;
  }
}
