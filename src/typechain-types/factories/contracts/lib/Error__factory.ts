/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Error, ErrorInterface } from "../../../contracts/lib/Error";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "AlreadyABlacklistedImage",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyJoinedMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "ArityMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "AssignOnlyToIdleGenerators",
    type: "error",
  },
  {
    inputs: [],
    name: "AttestationTimeout",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "BlacklistedImage",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotAssignExpiredTasks",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotBeAdminLess",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotBeMoreThanDeclaredCompute",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotBeSlashed",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotLeaveMarketWithActiveRequest",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotLeaveWithActiveMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotModifyImagesForPublicMarkets",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "CannotRemoveDefaultImageFromMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "CannotSlashUsingValidInputs",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotUseMatchingEngineRole",
    type: "error",
  },
  {
    inputs: [],
    name: "EnclaveKeyNotVerified",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsAcceptableRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "familyId",
        type: "bytes32",
      },
    ],
    name: "FailedAddingToFamily",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "FailedWhitelistingImages",
    type: "error",
  },
  {
    inputs: [],
    name: "GeneratorAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "InactiveMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectImageId",
    type: "error",
  },
  {
    inputs: [],
    name: "InferredImageIdIsDifferent",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientGeneratorComputeAvailable",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientStakeToLock",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidContractAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidECIESACL",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEnclaveKey",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "invalidSignerAddress",
        type: "address",
      },
    ],
    name: "InvalidEnclaveSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidGenerator",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidGeneratorStatePerMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInputs",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "KeyAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "MarketAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxParallelRequestsPerMarketExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "MustBeAnEnclave",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAdminCanCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "OnlyAssignedAsksCanBeProved",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "OnlyExpiredAsksCanBeCancelled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "OnlyGeneratorCanDiscardRequest",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyMarketCreator",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyMatchingEngineCanAssign",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyValidGeneratorsCanRequestExit",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyWorkingGenerators",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "ProofPriceMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "ProofTimeMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "PublicMarketsDontNeedKey",
    type: "error",
  },
  {
    inputs: [],
    name: "ReduceComputeRequestNotInPlace",
    type: "error",
  },
  {
    inputs: [],
    name: "ReductionRequestNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "RequestAlreadyInPlace",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "ShouldBeInAssignedState",
    type: "error",
  },
  {
    inputs: [],
    name: "ShouldBeInCreateState",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
    ],
    name: "ShouldBeInCrossedDeadlineState",
    type: "error",
  },
  {
    inputs: [],
    name: "UnstakeRequestNotInPlace",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122065776ea3e3b6cda7ac3054e75d2943162bc98ae475600c6384ef77b46d5d7bf864736f6c63430008180033";

type ErrorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: ErrorConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Error__factory extends ContractFactory {
  constructor(...args: ErrorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Error & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Error__factory {
    return super.connect(runner) as Error__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorInterface {
    return new Interface(_abi) as ErrorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Error {
    return new Contract(address, _abi, runner) as unknown as Error;
  }
}
