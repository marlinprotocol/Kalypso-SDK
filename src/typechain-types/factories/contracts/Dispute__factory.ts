/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Dispute, DisputeInterface } from "../../contracts/Dispute";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAttestationVerifier",
        name: "_attestationVerifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ATTESTATION_VERIFIER",
    outputs: [
      {
        internalType: "contract IAttestationVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "askId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "proverData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "completeData",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "expectedImageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "defaultIvsSigner",
        type: "address",
      },
    ],
    name: "checkDisputeUsingAttestationAndOrSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610cc5380380610cc583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610c35610090600039600081816067015260ba0152610c356000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c80622e27181461003a578063cd79f90614610062575b600080fd5b61004d6100483660046107a9565b6100a1565b60405190151581526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b60008080806100b287890189610911565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638e760afe846040518263ffffffff1660e01b815260040161010491906109de565b60006040518083038186803b15801561011c57600080fd5b505afa158015610130573d6000803e3d6000fd5b50505050801561017d576101738b8b8b85898b158061016e57507f99ff0d9125e1fc9531a11262e15aeb2c60509a078c4cc4c64cefdfb06ff686478c145b61019c565b9350505050610191565b61018b8b8b8b868a876102cd565b93505050505b979650505050505050565b60008082156101d7578787876040516020016101ba939291906109f1565b6040516020818303038152906040528051906020012090506101fc565b60408051602081018a9052016040516020818303038152906040528051906020012090505b6000610255826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050600061026382886103c1565b9050856001600160a01b0316816001600160a01b03161460405180604001604052806002815260200161473760f01b815250906102bc5760405162461bcd60e51b81526004016102b391906109de565b60405180910390fd5b5060019a9950505050505050505050565b6000806102d9856103e7565b90508381146040518060400160405280600381526020016241313160e81b815250906103185760405162461bcd60e51b81526004016102b391906109de565b5061ea6061032586610420565b61032f9190610a27565b4211156040518060400160405280600381526020016220989960e91b8152509061036c5760405162461bcd60e51b81526004016102b391906109de565b50600061037886610455565b91506103b4905089898987858a158061016e57507f99ff0d9125e1fc9531a11262e15aeb2c60509a078c4cc4c64cefdfb06ff686478b1461019c565b9998505050505050505050565b60008060006103d0858561048b565b915091506103dd816104d0565b5090505b92915050565b600080600080848060200190518101906104019190610a95565b505050945094509450505061041783838361061d565b95945050505050565b600080828060200190518101906104379190610a95565b9750505050505050506103e88161044e9190610b84565b9392505050565b60606000808380602001905181019061046e9190610a95565b5050505050509150508061048182610656565b9250925050915091565b60008082516041036104c15760208301516040840151606085015160001a6104b5878285856106a3565b945094505050506104c9565b506000905060025b9250929050565b60008160048111156104e4576104e4610ba6565b036104ec5750565b600181600481111561050057610500610ba6565b0361054d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102b3565b600281600481111561056157610561610ba6565b036105ae5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102b3565b60038160048111156105c2576105c2610ba6565b0361061a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102b3565b50565b60008084848460405160200161063593929190610bbc565b60408051808303601f19018152919052805160209091012095945050505050565b6000815160401460405180604001604052806002815260200161473760f01b815250906106965760405162461bcd60e51b81526004016102b391906109de565b5050805160209091012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156106da575060009050600361075e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561072e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107575760006001925092505061075e565b9150600090505b94509492505050565b60008083601f84011261077957600080fd5b50813567ffffffffffffffff81111561079157600080fd5b6020830191508360208285010111156104c957600080fd5b600080600080600080600060a0888a0312156107c457600080fd5b87359650602088013567ffffffffffffffff808211156107e357600080fd5b6107ef8b838c01610767565b909850965060408a013591508082111561080857600080fd5b506108158a828b01610767565b9095509350506060880135915060808801356001600160a01b038116811461083c57600080fd5b8091505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561088b5761088b61084c565b604052919050565b600067ffffffffffffffff8211156108ad576108ad61084c565b50601f01601f191660200190565b600082601f8301126108cc57600080fd5b81356108df6108da82610893565b610862565b8181528460208386010111156108f457600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561092657600080fd5b833567ffffffffffffffff8082111561093e57600080fd5b61094a878388016108bb565b9450602086013591508082111561096057600080fd5b5061096d868287016108bb565b9250506040840135801515811461098357600080fd5b809150509250925092565b60005b838110156109a9578181015183820152602001610991565b50506000910152565b600081518084526109ca81602086016020860161098e565b601f01601f19169290920160200192915050565b60208152600061044e60208301846109b2565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b808201808211156103e157634e487b7160e01b600052601160045260246000fd5b600082601f830112610a5957600080fd5b8151610a676108da82610893565b818152846020838601011115610a7c57600080fd5b610a8d82602083016020870161098e565b949350505050565b600080600080600080600080610100898b031215610ab257600080fd5b885167ffffffffffffffff80821115610aca57600080fd5b610ad68c838d01610a48565b995060208b0151915080821115610aec57600080fd5b610af88c838d01610a48565b985060408b0151915080821115610b0e57600080fd5b610b1a8c838d01610a48565b975060608b0151915080821115610b3057600080fd5b610b3c8c838d01610a48565b965060808b0151915080821115610b5257600080fd5b50610b5f8b828c01610a48565b94505060a0890151925060c0890151915060e089015190509295985092959890939650565b600082610ba157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b60008451610bce81846020890161098e565b845190830190610be281836020890161098e565b8451910190610bf581836020880161098e565b019594505050505056fea264697066735822122010c08409f526a48d4a32dd836c46070a4c41ce48a819fc1912b720ab7b5531eb64736f6c63430008130033";

type DisputeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: DisputeConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dispute__factory extends ContractFactory {
  constructor(...args: DisputeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _attestationVerifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_attestationVerifier, overrides || {});
  }
  override deploy(_attestationVerifier: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(_attestationVerifier, overrides || {}) as Promise<
      Dispute & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Dispute__factory {
    return super.connect(runner) as Dispute__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DisputeInterface {
    return new Interface(_abi) as DisputeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Dispute {
    return new Contract(address, _abi, runner) as unknown as Dispute;
  }
}
