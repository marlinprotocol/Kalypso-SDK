/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Plonk_verifier_wrapper,
  Plonk_verifier_wrapperInterface,
} from "../../../../contracts/verifierWrappers/plonk_vk_wrapper.sol/Plonk_verifier_wrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract i_plonk_vk",
        name: "_iverifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "inputs",
        type: "bytes32[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "encodeInputAndProofForVerification",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "inputs",
        type: "bytes32[]",
      },
    ],
    name: "encodeInputs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "encodeProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "iverifier",
    outputs: [
      {
        internalType: "contract i_plonk_vk",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedData",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "inputs",
        type: "bytes",
      },
    ],
    name: "verifyInputs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161084f38038061084f83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107be6100916000396000818160f101526101fe01526107be6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633fa0cfbf146100675780634cff91251461009057806370f9dfca146100a35780638e760afe146100b6578063a6dfbc7f146100d9578063e7f5b81d146100ec575b600080fd5b61007a61007536600461036f565b61012b565b60405161008791906103fc565b60405180910390f35b61007a61009e36600461048f565b610154565b61007a6100b13660046104c4565b610167565b6100c96100c4366004610528565b6101a3565b6040519015158152602001610087565b6100c96100e7366004610528565b610281565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610087565b60608160405160200161013e91906105d5565b6040516020818303038152906040529050919050565b60608160405160200161013e91906103fc565b60606101728361012b565b61017b83610154565b60405160200161018c9291906105e8565b604051602081830303815290604052905092915050565b600060608082806101b686880188610616565b91509150818060200190518101906101ce919061064d565b9350808060200190518101906101e491906106d3565b604051633a94343960e21b81529093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ea50d0e4906102359086908890600401610741565b602060405180830381865afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610766565b979650505050505050565b600061028f8284018461036f565b5060019392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156102d8576102d8610299565b604052919050565b600067ffffffffffffffff8211156102fa576102fa610299565b5060051b60200190565b600082601f83011261031557600080fd5b8135602061032a610325836102e0565b6102af565b82815260059290921b8401810191818101908684111561034957600080fd5b8286015b84811015610364578035835291830191830161034d565b509695505050505050565b60006020828403121561038157600080fd5b813567ffffffffffffffff81111561039857600080fd5b6103a484828501610304565b949350505050565b60005b838110156103c75781810151838201526020016103af565b50506000910152565b600081518084526103e88160208601602086016103ac565b601f01601f19169290920160200192915050565b60208152600061040f60208301846103d0565b9392505050565b600067ffffffffffffffff82111561043057610430610299565b50601f01601f191660200190565b600082601f83011261044f57600080fd5b813561045d61032582610416565b81815284602083860101111561047257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156104a157600080fd5b813567ffffffffffffffff8111156104b857600080fd5b6103a48482850161043e565b600080604083850312156104d757600080fd5b823567ffffffffffffffff808211156104ef57600080fd5b6104fb86838701610304565b9350602085013591508082111561051157600080fd5b5061051e8582860161043e565b9150509250929050565b6000806020838503121561053b57600080fd5b823567ffffffffffffffff8082111561055357600080fd5b818501915085601f83011261056757600080fd5b81358181111561057657600080fd5b86602082850101111561058857600080fd5b60209290920196919550909350505050565b600081518084526020808501945080840160005b838110156105ca578151875295820195908201906001016105ae565b509495945050505050565b60208152600061040f602083018461059a565b6040815260006105fb60408301856103d0565b828103602084015261060d81856103d0565b95945050505050565b6000806040838503121561062957600080fd5b823567ffffffffffffffff8082111561064157600080fd5b6104fb8683870161043e565b6000602080838503121561066057600080fd5b825167ffffffffffffffff81111561067757600080fd5b8301601f8101851361068857600080fd5b8051610696610325826102e0565b81815260059190911b820183019083810190878311156106b557600080fd5b928401925b82841015610276578351825292840192908401906106ba565b6000602082840312156106e557600080fd5b815167ffffffffffffffff8111156106fc57600080fd5b8201601f8101841361070d57600080fd5b805161071b61032582610416565b81815285602083850101111561073057600080fd5b61060d8260208301602086016103ac565b60408152600061075460408301856103d0565b828103602084015261060d818561059a565b60006020828403121561077857600080fd5b8151801515811461040f57600080fdfea2646970667358221220754c7954d52f5430a1c96b8021f813b8824bbed27a877f48bc1cd9a53e61015364736f6c63430008130033";

type Plonk_verifier_wrapperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: Plonk_verifier_wrapperConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Plonk_verifier_wrapper__factory extends ContractFactory {
  constructor(...args: Plonk_verifier_wrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _iverifier: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_iverifier, overrides || {});
  }
  override deploy(_iverifier: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(_iverifier, overrides || {}) as Promise<
      Plonk_verifier_wrapper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Plonk_verifier_wrapper__factory {
    return super.connect(runner) as Plonk_verifier_wrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Plonk_verifier_wrapperInterface {
    return new Interface(_abi) as Plonk_verifier_wrapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Plonk_verifier_wrapper {
    return new Contract(address, _abi, runner) as unknown as Plonk_verifier_wrapper;
  }
}
