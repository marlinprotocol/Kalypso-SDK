/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { MockAttestationVerifier, MockAttestationVerifierInterface } from "../../../contracts/mock/MockAttestationVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isVerified",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeVerify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "attestation",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "sourceEnclaveKey",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveKey",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "PCR0",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "PCR1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "PCR2",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "enclaveCPUs",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "enclaveMemory",
        type: "uint256",
      },
    ],
    name: "safeVerify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "attestation",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "sourceEnclaveKey",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveKey",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "PCR0",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "PCR1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "PCR2",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "enclaveCPUs",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "enclaveMemory",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610324806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306d5a2ed1461005c5780638e760afe1461006f578063948b445914610098578063b247499b146100b0578063b9209e33146100cc575b600080fd5b61006d61006a366004610191565b50565b005b61008361007d366004610191565b50600190565b60405190151581526020015b60405180910390f35b61006d6100a63660046101ea565b5050505050505050565b6100836100be3660046101ea565b600198975050505050505050565b6100e06100da3660046102cc565b50600090565b60405190815260200161008f565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261011557600080fd5b813567ffffffffffffffff80821115610130576101306100ee565b604051601f8301601f19908116603f01168101908282118183101715610158576101586100ee565b8160405283815286602085880101111561017157600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156101a357600080fd5b813567ffffffffffffffff8111156101ba57600080fd5b6101c684828501610104565b949350505050565b80356001600160a01b03811681146101e557600080fd5b919050565b600080600080600080600080610100898b03121561020757600080fd5b883567ffffffffffffffff8082111561021f57600080fd5b61022b8c838d01610104565b995061023960208c016101ce565b985061024760408c016101ce565b975060608b013591508082111561025d57600080fd5b6102698c838d01610104565b965060808b013591508082111561027f57600080fd5b61028b8c838d01610104565b955060a08b01359150808211156102a157600080fd5b506102ae8b828c01610104565b93505060c0890135915060e089013590509295985092959890939650565b6000602082840312156102de57600080fd5b6102e7826101ce565b939250505056fea2646970667358221220181f87dca70b1fe806abb1dbea4a17b04f00b8ec7c2be6b0ff9b0ae725a9819564736f6c63430008130033";

type MockAttestationVerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockAttestationVerifierConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAttestationVerifier__factory extends ContractFactory {
  constructor(...args: MockAttestationVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAttestationVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAttestationVerifier__factory {
    return super.connect(runner) as MockAttestationVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAttestationVerifierInterface {
    return new Interface(_abi) as MockAttestationVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockAttestationVerifier {
    return new Contract(address, _abi, runner) as unknown as MockAttestationVerifier;
  }
}
