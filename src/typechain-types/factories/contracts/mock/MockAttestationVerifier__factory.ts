/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockAttestationVerifier,
  MockAttestationVerifierInterface,
} from "../../../contracts/mock/MockAttestationVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isVerified",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "attestation",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "enclaveKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "PCR0",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "PCR1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "PCR2",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "enclaveCPUs",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "enclaveMemory",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "enclaveKey",
        type: "address",
      },
    ],
    name: "whitelistEnclave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610321806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806360680d60146100515780638e760afe14610065578063ac0f0bd514610076578063b9209e331461008e575b600080fd5b61006361005f3660046100d0565b5050565b005b61006361007336600461019f565b50565b6100636100843660046101dc565b5050505050505050565b6100a261009c3660046102c9565b50600090565b60405190815260200160405180910390f35b80356001600160a01b03811681146100cb57600080fd5b919050565b600080604083850312156100e357600080fd5b823591506100f3602084016100b4565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261012357600080fd5b813567ffffffffffffffff8082111561013e5761013e6100fc565b604051601f8301601f19908116603f01168101908282118183101715610166576101666100fc565b8160405283815286602085880101111561017f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156101b157600080fd5b813567ffffffffffffffff8111156101c857600080fd5b6101d484828501610112565b949350505050565b600080600080600080600080610100898b0312156101f957600080fd5b883567ffffffffffffffff8082111561021157600080fd5b61021d8c838d01610112565b995060208b013591508082111561023357600080fd5b61023f8c838d01610112565b985060408b013591508082111561025557600080fd5b6102618c838d01610112565b975060608b013591508082111561027757600080fd5b6102838c838d01610112565b965060808b013591508082111561029957600080fd5b506102a68b828c01610112565b989b979a50959894979660a0860135965060c08601359560e00135945092505050565b6000602082840312156102db57600080fd5b6102e4826100b4565b939250505056fea26469706673582212200cd1dc73bd6701f6ff4387c7d5d8f26eac176f285a7b6d6bca48aed507816e2b64736f6c63430008130033";

type MockAttestationVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAttestationVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAttestationVerifier__factory extends ContractFactory {
  constructor(...args: MockAttestationVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAttestationVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockAttestationVerifier__factory {
    return super.connect(runner) as MockAttestationVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAttestationVerifierInterface {
    return new Interface(_abi) as MockAttestationVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAttestationVerifier {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockAttestationVerifier;
  }
}
