/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  UC_Rekt,
  UC_RektInterface,
} from "../../../contracts/mock/UC_Rekt";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "my_operation1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "my_operation2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rektSlot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rektSlot2",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "slot1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b50600054610100900460ff16158080156100355750600054600160ff909116105b8061004f5750303b15801561004f575060005460ff166001145b6100b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156100d9576000805461ff0019166101001790555b801561011f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50608051610be4610157600039600081816101ed01528181610236015281816102cc0152818161030c01526103960152610be46000f3fe6080604052600436106100915760003560e01c806352d1902d1161005957806352d1902d146101505780638129fc1c14610165578063a8d21b9d1461017a578063bc2e66e6146101c1578063eefb4461146101cd57600080fd5b806301ffc9a7146100965780631f457cb5146100dc578063303408d6146101015780633659cfe61461011b5780634f1ef2861461013d575b600080fd5b3480156100a257600080fd5b506100c76100b136600461090a565b6001600160e01b0319166301ffc9a760e01b1490565b60405190151581526020015b60405180910390f35b3480156100e857600080fd5b506100f36102bd5481565b6040519081526020016100d3565b34801561010d57600080fd5b5060fb546100c79060ff1681565b34801561012757600080fd5b5061013b610136366004610950565b6101e3565b005b61013b61014b366004610981565b6102c2565b34801561015c57600080fd5b506100f3610389565b34801561017157600080fd5b5061013b61043c565b34801561018657600080fd5b5060fb546101a49061010090046bffffffffffffffffffffffff1681565b6040516bffffffffffffffffffffffff90911681526020016100d3565b34801561013b57600080fd5b3480156101d957600080fd5b506102bd546100f3565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036102345760405162461bcd60e51b815260040161022b90610a43565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661027d600080516020610b68833981519152546001600160a01b031690565b6001600160a01b0316146102a35760405162461bcd60e51b815260040161022b90610a8f565b604080516000808252602082019092526102bf91839190610544565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361030a5760405162461bcd60e51b815260040161022b90610a43565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610353600080516020610b68833981519152546001600160a01b031690565b6001600160a01b0316146103795760405162461bcd60e51b815260040161022b90610a8f565b61038582826001610544565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104295760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161022b565b50600080516020610b6883398151915290565b600054610100900460ff161580801561045c5750600054600160ff909116105b806104765750303b158015610476575060005460ff166001145b6104d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161022b565b6000805460ff1916600117905580156104fc576000805461ff0019166101001790555b80156102bf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561057c57610577836106b4565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156105d6575060408051601f3d908101601f191682019092526105d391810190610adb565b60015b6106395760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161022b565b600080516020610b6883398151915281146106a85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161022b565b50610577838383610750565b6001600160a01b0381163b6107215760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161022b565b600080516020610b6883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6107598361077b565b6000825111806107665750805b156105775761077583836107bb565b50505050565b610784816106b4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606107e08383604051806060016040528060278152602001610b88602791396107e7565b9392505050565b6060600080856001600160a01b0316856040516108049190610b18565b600060405180830381855af49150503d806000811461083f576040519150601f19603f3d011682016040523d82523d6000602084013e610844565b606091505b50915091506108558683838761085f565b9695505050505050565b606083156108ce5782516000036108c7576001600160a01b0385163b6108c75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161022b565b50816108d8565b6108d883836108e0565b949350505050565b8151156108f05781518083602001fd5b8060405162461bcd60e51b815260040161022b9190610b34565b60006020828403121561091c57600080fd5b81356001600160e01b0319811681146107e057600080fd5b80356001600160a01b038116811461094b57600080fd5b919050565b60006020828403121561096257600080fd5b6107e082610934565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561099457600080fd5b61099d83610934565b9150602083013567ffffffffffffffff808211156109ba57600080fd5b818501915085601f8301126109ce57600080fd5b8135818111156109e0576109e061096b565b604051601f8201601f19908116603f01168101908382118183101715610a0857610a0861096b565b81604052828152886020848701011115610a2157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215610aed57600080fd5b5051919050565b60005b83811015610b0f578181015183820152602001610af7565b50506000910152565b60008251610b2a818460208701610af4565b9190910192915050565b6020815260008251806020840152610b53816040850160208701610af4565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa066d1dcf2fca280338c2b9de7673b7e045698beccad613b81a1a14a75ed42e64736f6c63430008130033";

type UC_RektConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UC_RektConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UC_Rekt__factory extends ContractFactory {
  constructor(...args: UC_RektConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UC_Rekt & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UC_Rekt__factory {
    return super.connect(runner) as UC_Rekt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UC_RektInterface {
    return new Interface(_abi) as UC_RektInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): UC_Rekt {
    return new Contract(address, _abi, runner) as unknown as UC_Rekt;
  }
}
