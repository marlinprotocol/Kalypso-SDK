/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AttestationAutherUpgradeable,
  AttestationAutherUpgradeableInterface,
} from "../../../contracts/periphery/AttestationAutherUpgradeable";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAttestationVerifier",
        name: "attestationVerifier",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxAge",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "EnclaveImageRevoked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "PCR0",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "PCR1",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "PCR2",
        type: "bytes",
      },
    ],
    name: "EnclaveImageWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "enclavePubKey",
        type: "bytes",
      },
    ],
    name: "EnclaveKeyRevoked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "enclavePubKey",
        type: "bytes",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "EnclaveKeyVerified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "enclavePubKey",
        type: "bytes",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
    ],
    name: "EnclaveKeyWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "ATTESTATION_MAX_AGE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ATTESTATION_VERIFIER",
    outputs: [
      {
        internalType: "contract IAttestationVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "enclavePubKey",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "imageId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "enclaveCPUs",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "enclaveMemory",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestampInMilliseconds",
        type: "uint256",
      },
    ],
    name: "verifyKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161091e38038061091e83398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a05161086e6100b060003960008181604b01526101f301526000818160850152610442015261086e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639aec990e14610046578063cd79f90614610080578063fb94db2b146100bf575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100a77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610077565b6100d26100cd36600461063d565b6100d4565b005b6100e28686868686866100ea565b505050505050565b60008481526001602052604090208054610103906106c4565b905060000361016f5760405162461bcd60e51b815260206004820152602d60248201527f41413a564b2d456e636c61766520696d61676520746f20766572696679206e6f60448201526c1d081dda1a5d195b1a5cdd1959609a1b60648201526084015b60405180910390fd5b600061017a8661053b565b6001600160a01b038116600090815260026020526040902054909150156101ee5760405162461bcd60e51b815260206004820152602260248201527f41413a564b2d456e636c617665206b657920616c726561647920766572696669604482015261195960f21b6064820152608401610166565b6102187f0000000000000000000000000000000000000000000000000000000000000000426106fe565b6102246103e884610725565b116102715760405162461bcd60e51b815260206004820152601960248201527f41413a564b2d4174746573746174696f6e20746f6f206f6c64000000000000006044820152606401610166565b600085815260016020526040808220815160608101909252805482908290610298906106c4565b80601f01602080910402602001604051908101604052809291908181526020018280546102c4906106c4565b80156103115780601f106102e657610100808354040283529160200191610311565b820191906000526020600020905b8154815290600101906020018083116102f457829003601f168201915b5050505050815260200160018201805461032a906106c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610356906106c4565b80156103a35780601f10610378576101008083540402835291602001916103a3565b820191906000526020600020905b81548152906001019060200180831161038657829003601f168201915b505050505081526020016002820180546103bc906106c4565b80601f01602080910402602001604051908101604052809291908181526020018280546103e8906106c4565b80156104355780601f1061040a57610100808354040283529160200191610435565b820191906000526020600020905b81548152906001019060200180831161041857829003601f168201915b50505050508152505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ac0f0bd589898460000151856020015186604001518b8b8b6040518963ffffffff1660e01b81526004016104a6989796959493929190610797565b60006040518083038186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b5050506001600160a01b038316600090815260026020526040908190208890555187915061050190899061081c565b604051908190038120907ff4837f1a66a1e5fbde2c40d0f6eff75183139e79b0fc1eaab280a3a0be38e7b190600090a35050505050505050565b6000815160401461058e5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207075626c6963206b6579206c656e677468000000000000006044820152606401610166565b50805160209091012090565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126105c157600080fd5b813567ffffffffffffffff808211156105dc576105dc61059a565b604051601f8301601f19908116603f011681019082821181831017156106045761060461059a565b8160405283815286602085880101111561061d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561065657600080fd5b863567ffffffffffffffff8082111561066e57600080fd5b61067a8a838b016105b0565b9750602089013591508082111561069057600080fd5b5061069d89828a016105b0565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b600181811c908216806106d857607f821691505b6020821081036106f857634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561071f57634e487b7160e01b600052601160045260246000fd5b92915050565b60008261074257634e487b7160e01b600052601260045260246000fd5b500490565b60005b8381101561076257818101518382015260200161074a565b50506000910152565b60008151808452610783816020860160208601610747565b601f01601f19169290920160200192915050565b60006101008083526107ab8184018c61076b565b905082810360208401526107bf818b61076b565b905082810360408401526107d3818a61076b565b905082810360608401526107e7818961076b565b905082810360808401526107fb818861076b565b60a0840196909652505060c081019290925260e09091015295945050505050565b6000825161082e818460208701610747565b919091019291505056fea2646970667358221220f4c511d89800adf20f5371c933a30bb5592c48bb51acfd18e118be67df4c071f64736f6c63430008130033";

type AttestationAutherUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttestationAutherUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttestationAutherUpgradeable__factory extends ContractFactory {
  constructor(...args: AttestationAutherUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    attestationVerifier: AddressLike,
    maxAge: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      attestationVerifier,
      maxAge,
      overrides || {}
    );
  }
  override deploy(
    attestationVerifier: AddressLike,
    maxAge: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      attestationVerifier,
      maxAge,
      overrides || {}
    ) as Promise<
      AttestationAutherUpgradeable & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): AttestationAutherUpgradeable__factory {
    return super.connect(runner) as AttestationAutherUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttestationAutherUpgradeableInterface {
    return new Interface(_abi) as AttestationAutherUpgradeableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AttestationAutherUpgradeable {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as AttestationAutherUpgradeable;
  }
}
