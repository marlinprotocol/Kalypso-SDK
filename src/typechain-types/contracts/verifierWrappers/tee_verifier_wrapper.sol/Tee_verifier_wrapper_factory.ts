/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface Tee_verifier_wrapper_factoryInterface extends Interface {
  getFunction(nameOrSignature: "create_tee_verifier_wrapper"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TeeVerifierWrapperCreated"): EventFragment;

  encodeFunctionData(functionFragment: "create_tee_verifier_wrapper", values: [AddressLike, AddressLike, BytesLike[]]): string;

  decodeFunctionResult(functionFragment: "create_tee_verifier_wrapper", data: BytesLike): Result;
}

export namespace TeeVerifierWrapperCreatedEvent {
  export type InputTuple = [a: AddressLike];
  export type OutputTuple = [a: string];
  export interface OutputObject {
    a: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tee_verifier_wrapper_factory extends BaseContract {
  connect(runner?: ContractRunner | null): Tee_verifier_wrapper_factory;
  waitForDeployment(): Promise<this>;

  interface: Tee_verifier_wrapper_factoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  create_tee_verifier_wrapper: TypedContractMethod<
    [admin: AddressLike, _av: AddressLike, _proverPcrs: BytesLike[]],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: "create_tee_verifier_wrapper"
  ): TypedContractMethod<[admin: AddressLike, _av: AddressLike, _proverPcrs: BytesLike[]], [string], "nonpayable">;

  getEvent(
    key: "TeeVerifierWrapperCreated"
  ): TypedContractEvent<
    TeeVerifierWrapperCreatedEvent.InputTuple,
    TeeVerifierWrapperCreatedEvent.OutputTuple,
    TeeVerifierWrapperCreatedEvent.OutputObject
  >;

  filters: {
    "TeeVerifierWrapperCreated(address)": TypedContractEvent<
      TeeVerifierWrapperCreatedEvent.InputTuple,
      TeeVerifierWrapperCreatedEvent.OutputTuple,
      TeeVerifierWrapperCreatedEvent.OutputObject
    >;
    TeeVerifierWrapperCreated: TypedContractEvent<
      TeeVerifierWrapperCreatedEvent.InputTuple,
      TeeVerifierWrapperCreatedEvent.OutputTuple,
      TeeVerifierWrapperCreatedEvent.OutputObject
    >;
  };
}
