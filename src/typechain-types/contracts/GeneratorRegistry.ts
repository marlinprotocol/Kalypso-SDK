/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GeneratorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ENTITY_KEY_REGISTRY"
      | "KEY_REGISTER_ROLE"
      | "PARALLEL_REQUESTS_UPPER_LIMIT"
      | "SLASHER_ROLE"
      | "STAKING_TOKEN"
      | "UNLOCK_WAIT_BLOCKS"
      | "assignGeneratorTask"
      | "changeRewardAddress"
      | "completeGeneratorTask"
      | "decreaseDeclaredCompute"
      | "deregister"
      | "generatorInfoPerMarket"
      | "generatorRegistry"
      | "getGeneratorAssignmentDetails"
      | "getGeneratorRewardDetails"
      | "getGeneratorState"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "increaseDeclaredCompute"
      | "initialize"
      | "intendToReduceCompute"
      | "intendToReduceStake"
      | "joinMarketPlace"
      | "leaveMarketPlace"
      | "leaveMarketPlaces"
      | "proofMarketPlace"
      | "proxiableUUID"
      | "register"
      | "removeEncryptionKey"
      | "renounceRole"
      | "requestForExitMarketPlace"
      | "requestForExitMarketPlaces"
      | "revokeRole"
      | "slashGenerator"
      | "stake"
      | "supportsInterface"
      | "unstake"
      | "updateEncryptionKey"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddedStake"
      | "AdminChanged"
      | "BeaconUpgraded"
      | "ChangedGeneratorRewardAddress"
      | "DecreaseCompute"
      | "DeregisteredGenerator"
      | "IncreasedCompute"
      | "Initialized"
      | "JoinedMarketPlace"
      | "LeftMarketplace"
      | "RegisteredGenerator"
      | "RemovedStake"
      | "RequestComputeDecrease"
      | "RequestExitMarketPlace"
      | "RequestStakeDecrease"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ENTITY_KEY_REGISTRY", values?: undefined): string;
  encodeFunctionData(functionFragment: "KEY_REGISTER_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PARALLEL_REQUESTS_UPPER_LIMIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "SLASHER_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "STAKING_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNLOCK_WAIT_BLOCKS", values?: undefined): string;
  encodeFunctionData(functionFragment: "assignGeneratorTask", values: [AddressLike, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "changeRewardAddress", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "completeGeneratorTask", values: [AddressLike, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "decreaseDeclaredCompute", values?: undefined): string;
  encodeFunctionData(functionFragment: "deregister", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "generatorInfoPerMarket", values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "generatorRegistry", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "getGeneratorAssignmentDetails", values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getGeneratorRewardDetails", values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getGeneratorState", values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getRoleMember", values: [BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getRoleMemberCount", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "increaseDeclaredCompute", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "intendToReduceCompute", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "intendToReduceStake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "joinMarketPlace",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "leaveMarketPlace", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "leaveMarketPlaces", values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "proofMarketPlace", values?: undefined): string;
  encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
  encodeFunctionData(functionFragment: "register", values: [AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "removeEncryptionKey", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "requestForExitMarketPlace", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "requestForExitMarketPlaces", values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "slashGenerator", values: [AddressLike, BigNumberish, BigNumberish, AddressLike]): string;
  encodeFunctionData(functionFragment: "stake", values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "unstake", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "updateEncryptionKey", values: [BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;

  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ENTITY_KEY_REGISTRY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KEY_REGISTER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PARALLEL_REQUESTS_UPPER_LIMIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SLASHER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STAKING_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNLOCK_WAIT_BLOCKS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assignGeneratorTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeRewardAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "completeGeneratorTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decreaseDeclaredCompute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deregister", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "generatorInfoPerMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "generatorRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGeneratorAssignmentDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGeneratorRewardDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGeneratorState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleMemberCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseDeclaredCompute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "intendToReduceCompute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "intendToReduceStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinMarketPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveMarketPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveMarketPlaces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofMarketPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeEncryptionKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestForExitMarketPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestForExitMarketPlaces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slashGenerator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateEncryptionKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
}

export namespace AddedStakeEvent {
  export type InputTuple = [generator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [generator: string, amount: bigint];
  export interface OutputObject {
    generator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedGeneratorRewardAddressEvent {
  export type InputTuple = [generator: AddressLike, newRewardAddress: AddressLike];
  export type OutputTuple = [generator: string, newRewardAddress: string];
  export interface OutputObject {
    generator: string;
    newRewardAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseComputeEvent {
  export type InputTuple = [generator: AddressLike, compute: BigNumberish];
  export type OutputTuple = [generator: string, compute: bigint];
  export interface OutputObject {
    generator: string;
    compute: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeregisteredGeneratorEvent {
  export type InputTuple = [generator: AddressLike];
  export type OutputTuple = [generator: string];
  export interface OutputObject {
    generator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreasedComputeEvent {
  export type InputTuple = [generator: AddressLike, compute: BigNumberish];
  export type OutputTuple = [generator: string, compute: bigint];
  export interface OutputObject {
    generator: string;
    compute: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinedMarketPlaceEvent {
  export type InputTuple = [generator: AddressLike, marketId: BigNumberish, computeAllocation: BigNumberish];
  export type OutputTuple = [generator: string, marketId: bigint, computeAllocation: bigint];
  export interface OutputObject {
    generator: string;
    marketId: bigint;
    computeAllocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeftMarketplaceEvent {
  export type InputTuple = [generator: AddressLike, marketId: BigNumberish];
  export type OutputTuple = [generator: string, marketId: bigint];
  export interface OutputObject {
    generator: string;
    marketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredGeneratorEvent {
  export type InputTuple = [generator: AddressLike, initialCompute: BigNumberish, initialStake: BigNumberish];
  export type OutputTuple = [generator: string, initialCompute: bigint, initialStake: bigint];
  export interface OutputObject {
    generator: string;
    initialCompute: bigint;
    initialStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedStakeEvent {
  export type InputTuple = [generator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [generator: string, amount: bigint];
  export interface OutputObject {
    generator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestComputeDecreaseEvent {
  export type InputTuple = [generator: AddressLike, intendedUtilization: BigNumberish];
  export type OutputTuple = [generator: string, intendedUtilization: bigint];
  export interface OutputObject {
    generator: string;
    intendedUtilization: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestExitMarketPlaceEvent {
  export type InputTuple = [generator: AddressLike, marketId: BigNumberish];
  export type OutputTuple = [generator: string, marketId: bigint];
  export interface OutputObject {
    generator: string;
    marketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestStakeDecreaseEvent {
  export type InputTuple = [generator: AddressLike, intendedUtilization: BigNumberish];
  export type OutputTuple = [generator: string, intendedUtilization: bigint];
  export interface OutputObject {
    generator: string;
    intendedUtilization: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
  export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GeneratorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): GeneratorRegistry;
  waitForDeployment(): Promise<this>;

  interface: GeneratorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ENTITY_KEY_REGISTRY: TypedContractMethod<[], [string], "view">;

  KEY_REGISTER_ROLE: TypedContractMethod<[], [string], "view">;

  PARALLEL_REQUESTS_UPPER_LIMIT: TypedContractMethod<[], [bigint], "view">;

  SLASHER_ROLE: TypedContractMethod<[], [string], "view">;

  STAKING_TOKEN: TypedContractMethod<[], [string], "view">;

  UNLOCK_WAIT_BLOCKS: TypedContractMethod<[], [bigint], "view">;

  assignGeneratorTask: TypedContractMethod<
    [generatorAddress: AddressLike, marketId: BigNumberish, stakeToLock: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeRewardAddress: TypedContractMethod<[newRewardAddress: AddressLike], [void], "nonpayable">;

  completeGeneratorTask: TypedContractMethod<
    [generatorAddress: AddressLike, marketId: BigNumberish, stakeToRelease: BigNumberish],
    [void],
    "nonpayable"
  >;

  decreaseDeclaredCompute: TypedContractMethod<[], [void], "nonpayable">;

  deregister: TypedContractMethod<[refundAddress: AddressLike], [void], "nonpayable">;

  generatorInfoPerMarket: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        state: bigint;
        computePerRequestRequired: bigint;
        proofGenerationCost: bigint;
        proposedTime: bigint;
        activeRequests: bigint;
      }
    ],
    "view"
  >;

  generatorRegistry: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        rewardAddress: string;
        totalStake: bigint;
        sumOfComputeAllocations: bigint;
        computeConsumed: bigint;
        stakeLocked: bigint;
        activeMarketPlaces: bigint;
        declaredCompute: bigint;
        intendedStakeUtilization: bigint;
        intendedComputeUtilization: bigint;
        generatorData: string;
      }
    ],
    "view"
  >;

  getGeneratorAssignmentDetails: TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish], [[bigint, bigint]], "view">;

  getGeneratorRewardDetails: TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish], [[string, bigint]], "view">;

  getGeneratorState: TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish], [[bigint, bigint]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<[role: BytesLike, index: BigNumberish], [string], "view">;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  hasRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;

  increaseDeclaredCompute: TypedContractMethod<[computeToIncrease: BigNumberish], [void], "nonpayable">;

  initialize: TypedContractMethod<[_admin: AddressLike, _proofMarketPlace: AddressLike], [void], "nonpayable">;

  intendToReduceCompute: TypedContractMethod<[newUtilization: BigNumberish], [void], "nonpayable">;

  intendToReduceStake: TypedContractMethod<[newUtilization: BigNumberish], [void], "nonpayable">;

  joinMarketPlace: TypedContractMethod<
    [
      marketId: BigNumberish,
      computePerRequestRequired: BigNumberish,
      proofGenerationCost: BigNumberish,
      proposedTime: BigNumberish,
      updateMarketDedicatedKey: boolean,
      attestationData: BytesLike,
      enclaveSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  leaveMarketPlace: TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;

  leaveMarketPlaces: TypedContractMethod<[marketIds: BigNumberish[]], [void], "nonpayable">;

  proofMarketPlace: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  register: TypedContractMethod<
    [rewardAddress: AddressLike, declaredCompute: BigNumberish, initialStake: BigNumberish, generatorData: BytesLike],
    [void],
    "nonpayable"
  >;

  removeEncryptionKey: TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;

  renounceRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  requestForExitMarketPlace: TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;

  requestForExitMarketPlaces: TypedContractMethod<[marketIds: BigNumberish[]], [void], "nonpayable">;

  revokeRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  slashGenerator: TypedContractMethod<
    [generatorAddress: AddressLike, marketId: BigNumberish, slashingAmount: BigNumberish, rewardAddress: AddressLike],
    [bigint],
    "nonpayable"
  >;

  stake: TypedContractMethod<[generatorAddress: AddressLike, amount: BigNumberish], [bigint], "nonpayable">;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  unstake: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  updateEncryptionKey: TypedContractMethod<
    [marketId: BigNumberish, attestationData: BytesLike, enclaveSignature: BytesLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<[newImplementation: AddressLike], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<[newImplementation: AddressLike, data: BytesLike], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ENTITY_KEY_REGISTRY"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "KEY_REGISTER_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "PARALLEL_REQUESTS_UPPER_LIMIT"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "SLASHER_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "STAKING_TOKEN"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "UNLOCK_WAIT_BLOCKS"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assignGeneratorTask"
  ): TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish, stakeToLock: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "changeRewardAddress"): TypedContractMethod<[newRewardAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeGeneratorTask"
  ): TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish, stakeToRelease: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "decreaseDeclaredCompute"): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "deregister"): TypedContractMethod<[refundAddress: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "generatorInfoPerMarket"): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        state: bigint;
        computePerRequestRequired: bigint;
        proofGenerationCost: bigint;
        proposedTime: bigint;
        activeRequests: bigint;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "generatorRegistry"): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, string] & {
        rewardAddress: string;
        totalStake: bigint;
        sumOfComputeAllocations: bigint;
        computeConsumed: bigint;
        stakeLocked: bigint;
        activeMarketPlaces: bigint;
        declaredCompute: bigint;
        intendedStakeUtilization: bigint;
        intendedComputeUtilization: bigint;
        generatorData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGeneratorAssignmentDetails"
  ): TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getGeneratorRewardDetails"
  ): TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getGeneratorState"
  ): TypedContractMethod<[generatorAddress: AddressLike, marketId: BigNumberish], [[bigint, bigint]], "view">;
  getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(nameOrSignature: "getRoleMember"): TypedContractMethod<[role: BytesLike, index: BigNumberish], [string], "view">;
  getFunction(nameOrSignature: "getRoleMemberCount"): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;
  getFunction(nameOrSignature: "increaseDeclaredCompute"): TypedContractMethod<[computeToIncrease: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_admin: AddressLike, _proofMarketPlace: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "intendToReduceCompute"): TypedContractMethod<[newUtilization: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "intendToReduceStake"): TypedContractMethod<[newUtilization: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "joinMarketPlace"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      computePerRequestRequired: BigNumberish,
      proofGenerationCost: BigNumberish,
      proposedTime: BigNumberish,
      updateMarketDedicatedKey: boolean,
      attestationData: BytesLike,
      enclaveSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "leaveMarketPlace"): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "leaveMarketPlaces"): TypedContractMethod<[marketIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(nameOrSignature: "proofMarketPlace"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [rewardAddress: AddressLike, declaredCompute: BigNumberish, initialStake: BigNumberish, generatorData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "removeEncryptionKey"): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "requestForExitMarketPlace"): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "requestForExitMarketPlaces"): TypedContractMethod<[marketIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slashGenerator"
  ): TypedContractMethod<
    [generatorAddress: AddressLike, marketId: BigNumberish, slashingAmount: BigNumberish, rewardAddress: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "stake"): TypedContractMethod<[generatorAddress: AddressLike, amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(nameOrSignature: "unstake"): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEncryptionKey"
  ): TypedContractMethod<[marketId: BigNumberish, attestationData: BytesLike, enclaveSignature: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "upgradeTo"): TypedContractMethod<[newImplementation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<[newImplementation: AddressLike, data: BytesLike], [void], "payable">;

  getEvent(key: "AddedStake"): TypedContractEvent<AddedStakeEvent.InputTuple, AddedStakeEvent.OutputTuple, AddedStakeEvent.OutputObject>;
  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
  getEvent(
    key: "ChangedGeneratorRewardAddress"
  ): TypedContractEvent<
    ChangedGeneratorRewardAddressEvent.InputTuple,
    ChangedGeneratorRewardAddressEvent.OutputTuple,
    ChangedGeneratorRewardAddressEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseCompute"
  ): TypedContractEvent<DecreaseComputeEvent.InputTuple, DecreaseComputeEvent.OutputTuple, DecreaseComputeEvent.OutputObject>;
  getEvent(
    key: "DeregisteredGenerator"
  ): TypedContractEvent<
    DeregisteredGeneratorEvent.InputTuple,
    DeregisteredGeneratorEvent.OutputTuple,
    DeregisteredGeneratorEvent.OutputObject
  >;
  getEvent(
    key: "IncreasedCompute"
  ): TypedContractEvent<IncreasedComputeEvent.InputTuple, IncreasedComputeEvent.OutputTuple, IncreasedComputeEvent.OutputObject>;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
  getEvent(
    key: "JoinedMarketPlace"
  ): TypedContractEvent<JoinedMarketPlaceEvent.InputTuple, JoinedMarketPlaceEvent.OutputTuple, JoinedMarketPlaceEvent.OutputObject>;
  getEvent(
    key: "LeftMarketplace"
  ): TypedContractEvent<LeftMarketplaceEvent.InputTuple, LeftMarketplaceEvent.OutputTuple, LeftMarketplaceEvent.OutputObject>;
  getEvent(
    key: "RegisteredGenerator"
  ): TypedContractEvent<RegisteredGeneratorEvent.InputTuple, RegisteredGeneratorEvent.OutputTuple, RegisteredGeneratorEvent.OutputObject>;
  getEvent(
    key: "RemovedStake"
  ): TypedContractEvent<RemovedStakeEvent.InputTuple, RemovedStakeEvent.OutputTuple, RemovedStakeEvent.OutputObject>;
  getEvent(
    key: "RequestComputeDecrease"
  ): TypedContractEvent<
    RequestComputeDecreaseEvent.InputTuple,
    RequestComputeDecreaseEvent.OutputTuple,
    RequestComputeDecreaseEvent.OutputObject
  >;
  getEvent(
    key: "RequestExitMarketPlace"
  ): TypedContractEvent<
    RequestExitMarketPlaceEvent.InputTuple,
    RequestExitMarketPlaceEvent.OutputTuple,
    RequestExitMarketPlaceEvent.OutputObject
  >;
  getEvent(
    key: "RequestStakeDecrease"
  ): TypedContractEvent<
    RequestStakeDecreaseEvent.InputTuple,
    RequestStakeDecreaseEvent.OutputTuple,
    RequestStakeDecreaseEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
  getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;

  filters: {
    "AddedStake(address,uint256)": TypedContractEvent<
      AddedStakeEvent.InputTuple,
      AddedStakeEvent.OutputTuple,
      AddedStakeEvent.OutputObject
    >;
    AddedStake: TypedContractEvent<AddedStakeEvent.InputTuple, AddedStakeEvent.OutputTuple, AddedStakeEvent.OutputObject>;

    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;

    "ChangedGeneratorRewardAddress(address,address)": TypedContractEvent<
      ChangedGeneratorRewardAddressEvent.InputTuple,
      ChangedGeneratorRewardAddressEvent.OutputTuple,
      ChangedGeneratorRewardAddressEvent.OutputObject
    >;
    ChangedGeneratorRewardAddress: TypedContractEvent<
      ChangedGeneratorRewardAddressEvent.InputTuple,
      ChangedGeneratorRewardAddressEvent.OutputTuple,
      ChangedGeneratorRewardAddressEvent.OutputObject
    >;

    "DecreaseCompute(address,uint256)": TypedContractEvent<
      DecreaseComputeEvent.InputTuple,
      DecreaseComputeEvent.OutputTuple,
      DecreaseComputeEvent.OutputObject
    >;
    DecreaseCompute: TypedContractEvent<
      DecreaseComputeEvent.InputTuple,
      DecreaseComputeEvent.OutputTuple,
      DecreaseComputeEvent.OutputObject
    >;

    "DeregisteredGenerator(address)": TypedContractEvent<
      DeregisteredGeneratorEvent.InputTuple,
      DeregisteredGeneratorEvent.OutputTuple,
      DeregisteredGeneratorEvent.OutputObject
    >;
    DeregisteredGenerator: TypedContractEvent<
      DeregisteredGeneratorEvent.InputTuple,
      DeregisteredGeneratorEvent.OutputTuple,
      DeregisteredGeneratorEvent.OutputObject
    >;

    "IncreasedCompute(address,uint256)": TypedContractEvent<
      IncreasedComputeEvent.InputTuple,
      IncreasedComputeEvent.OutputTuple,
      IncreasedComputeEvent.OutputObject
    >;
    IncreasedCompute: TypedContractEvent<
      IncreasedComputeEvent.InputTuple,
      IncreasedComputeEvent.OutputTuple,
      IncreasedComputeEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;

    "JoinedMarketPlace(address,uint256,uint256)": TypedContractEvent<
      JoinedMarketPlaceEvent.InputTuple,
      JoinedMarketPlaceEvent.OutputTuple,
      JoinedMarketPlaceEvent.OutputObject
    >;
    JoinedMarketPlace: TypedContractEvent<
      JoinedMarketPlaceEvent.InputTuple,
      JoinedMarketPlaceEvent.OutputTuple,
      JoinedMarketPlaceEvent.OutputObject
    >;

    "LeftMarketplace(address,uint256)": TypedContractEvent<
      LeftMarketplaceEvent.InputTuple,
      LeftMarketplaceEvent.OutputTuple,
      LeftMarketplaceEvent.OutputObject
    >;
    LeftMarketplace: TypedContractEvent<
      LeftMarketplaceEvent.InputTuple,
      LeftMarketplaceEvent.OutputTuple,
      LeftMarketplaceEvent.OutputObject
    >;

    "RegisteredGenerator(address,uint256,uint256)": TypedContractEvent<
      RegisteredGeneratorEvent.InputTuple,
      RegisteredGeneratorEvent.OutputTuple,
      RegisteredGeneratorEvent.OutputObject
    >;
    RegisteredGenerator: TypedContractEvent<
      RegisteredGeneratorEvent.InputTuple,
      RegisteredGeneratorEvent.OutputTuple,
      RegisteredGeneratorEvent.OutputObject
    >;

    "RemovedStake(address,uint256)": TypedContractEvent<
      RemovedStakeEvent.InputTuple,
      RemovedStakeEvent.OutputTuple,
      RemovedStakeEvent.OutputObject
    >;
    RemovedStake: TypedContractEvent<RemovedStakeEvent.InputTuple, RemovedStakeEvent.OutputTuple, RemovedStakeEvent.OutputObject>;

    "RequestComputeDecrease(address,uint256)": TypedContractEvent<
      RequestComputeDecreaseEvent.InputTuple,
      RequestComputeDecreaseEvent.OutputTuple,
      RequestComputeDecreaseEvent.OutputObject
    >;
    RequestComputeDecrease: TypedContractEvent<
      RequestComputeDecreaseEvent.InputTuple,
      RequestComputeDecreaseEvent.OutputTuple,
      RequestComputeDecreaseEvent.OutputObject
    >;

    "RequestExitMarketPlace(address,uint256)": TypedContractEvent<
      RequestExitMarketPlaceEvent.InputTuple,
      RequestExitMarketPlaceEvent.OutputTuple,
      RequestExitMarketPlaceEvent.OutputObject
    >;
    RequestExitMarketPlace: TypedContractEvent<
      RequestExitMarketPlaceEvent.InputTuple,
      RequestExitMarketPlaceEvent.OutputTuple,
      RequestExitMarketPlaceEvent.OutputObject
    >;

    "RequestStakeDecrease(address,uint256)": TypedContractEvent<
      RequestStakeDecreaseEvent.InputTuple,
      RequestStakeDecreaseEvent.OutputTuple,
      RequestStakeDecreaseEvent.OutputObject
    >;
    RequestStakeDecrease: TypedContractEvent<
      RequestStakeDecreaseEvent.InputTuple,
      RequestStakeDecreaseEvent.OutputTuple,
      RequestStakeDecreaseEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    "Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
  };
}
