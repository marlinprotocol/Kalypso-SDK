/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AttestationAutherUpgradeable {
  export type EnclaveImageStruct = {
    PCR0: BytesLike;
    PCR1: BytesLike;
    PCR2: BytesLike;
  };

  export type EnclaveImageStructOutput = [PCR0: string, PCR1: string, PCR2: string] & { PCR0: string; PCR1: string; PCR2: string };
}

export declare namespace IAttestationVerifier {
  export type AttestationStruct = {
    enclavePubKey: BytesLike;
    PCR0: BytesLike;
    PCR1: BytesLike;
    PCR2: BytesLike;
    timestampInMilliseconds: BigNumberish;
  };

  export type AttestationStructOutput = [
    enclavePubKey: string,
    PCR0: string,
    PCR1: string,
    PCR2: string,
    timestampInMilliseconds: bigint,
  ] & {
    enclavePubKey: string;
    PCR0: string;
    PCR1: string;
    PCR2: string;
    timestampInMilliseconds: bigint;
  };
}

export interface EntityKeyRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ATTESTATION_MAX_AGE"
      | "ATTESTATION_VERIFIER"
      | "DEFAULT_ADMIN_ROLE"
      | "KEY_REGISTER_ROLE"
      | "MODERATOR_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "addGeneratorRegistry"
      | "allowOnlyVerifiedFamily"
      | "blackListedImages"
      | "blacklistImage"
      | "getRoleAdmin"
      | "getVerifiedKey"
      | "getWhitelistedImage"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isImageInFamily"
      | "proxiableUUID"
      | "pub_key"
      | "removeEnclaveImageFromFamily"
      | "removePubkey"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updatePubkey"
      | "upgradeToAndCall"
      | "verifyEnclaveKey"
      | "verifyKey"
      | "whitelistImageUsingPcrs",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EnclaveImageAddedToFamily"
      | "EnclaveImageRemovedFromFamily"
      | "EnclaveImageRevoked"
      | "EnclaveImageWhitelisted"
      | "EnclaveKeyRevoked"
      | "EnclaveKeyVerified"
      | "EnclaveKeyWhitelisted"
      | "ImageBlacklisted"
      | "Initialized"
      | "RemoveKey"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "UpdateKey"
      | "Upgraded",
  ): EventFragment;

  encodeFunctionData(functionFragment: "ATTESTATION_MAX_AGE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ATTESTATION_VERIFIER", values?: undefined): string;
  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "KEY_REGISTER_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MODERATOR_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "addGeneratorRegistry", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "allowOnlyVerifiedFamily", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "blackListedImages", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "blacklistImage", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getVerifiedKey", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "getWhitelistedImage", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AttestationAutherUpgradeable.EnclaveImageStruct[]]): string;
  encodeFunctionData(functionFragment: "isImageInFamily", values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
  encodeFunctionData(functionFragment: "pub_key", values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "removeEnclaveImageFromFamily", values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "removePubkey", values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "updatePubkey", values: [AddressLike, BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "verifyEnclaveKey", values: [BytesLike, IAttestationVerifier.AttestationStruct]): string;
  encodeFunctionData(functionFragment: "verifyKey", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "whitelistImageUsingPcrs", values: [BytesLike, BytesLike]): string;

  decodeFunctionResult(functionFragment: "ATTESTATION_MAX_AGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ATTESTATION_VERIFIER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KEY_REGISTER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MODERATOR_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addGeneratorRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowOnlyVerifiedFamily", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blackListedImages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklistImage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVerifiedKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWhitelistedImage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isImageInFamily", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pub_key", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeEnclaveImageFromFamily", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePubkey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePubkey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyEnclaveKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistImageUsingPcrs", data: BytesLike): Result;
}

export namespace EnclaveImageAddedToFamilyEvent {
  export type InputTuple = [imageId: BytesLike, family: BytesLike];
  export type OutputTuple = [imageId: string, family: string];
  export interface OutputObject {
    imageId: string;
    family: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveImageRemovedFromFamilyEvent {
  export type InputTuple = [imageId: BytesLike, family: BytesLike];
  export type OutputTuple = [imageId: string, family: string];
  export interface OutputObject {
    imageId: string;
    family: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveImageRevokedEvent {
  export type InputTuple = [imageId: BytesLike];
  export type OutputTuple = [imageId: string];
  export interface OutputObject {
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveImageWhitelistedEvent {
  export type InputTuple = [imageId: BytesLike, PCR0: BytesLike, PCR1: BytesLike, PCR2: BytesLike];
  export type OutputTuple = [imageId: string, PCR0: string, PCR1: string, PCR2: string];
  export interface OutputObject {
    imageId: string;
    PCR0: string;
    PCR1: string;
    PCR2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveKeyRevokedEvent {
  export type InputTuple = [enclavePubKey: BytesLike];
  export type OutputTuple = [enclavePubKey: string];
  export interface OutputObject {
    enclavePubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveKeyVerifiedEvent {
  export type InputTuple = [enclavePubKey: BytesLike, imageId: BytesLike];
  export type OutputTuple = [enclavePubKey: string, imageId: string];
  export interface OutputObject {
    enclavePubKey: string;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnclaveKeyWhitelistedEvent {
  export type InputTuple = [enclavePubKey: BytesLike, imageId: BytesLike];
  export type OutputTuple = [enclavePubKey: string, imageId: string];
  export interface OutputObject {
    enclavePubKey: string;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ImageBlacklistedEvent {
  export type InputTuple = [imageId: BytesLike];
  export type OutputTuple = [imageId: string];
  export interface OutputObject {
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveKeyEvent {
  export type InputTuple = [user: AddressLike, keyIndex: BigNumberish];
  export type OutputTuple = [user: string, keyIndex: bigint];
  export interface OutputObject {
    user: string;
    keyIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
  export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateKeyEvent {
  export type InputTuple = [user: AddressLike, keyIndex: BigNumberish];
  export type OutputTuple = [user: string, keyIndex: bigint];
  export interface OutputObject {
    user: string;
    keyIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EntityKeyRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): EntityKeyRegistry;
  waitForDeployment(): Promise<this>;

  interface: EntityKeyRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  ATTESTATION_MAX_AGE: TypedContractMethod<[], [bigint], "view">;

  ATTESTATION_VERIFIER: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  KEY_REGISTER_ROLE: TypedContractMethod<[], [string], "view">;

  MODERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addGeneratorRegistry: TypedContractMethod<[_generatorRegistry: AddressLike], [void], "nonpayable">;

  allowOnlyVerifiedFamily: TypedContractMethod<[familyId: BytesLike, _key: AddressLike], [void], "view">;

  blackListedImages: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  blacklistImage: TypedContractMethod<[imageId: BytesLike], [void], "nonpayable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getVerifiedKey: TypedContractMethod<[_key: AddressLike], [string], "view">;

  getWhitelistedImage: TypedContractMethod<[_imageId: BytesLike], [AttestationAutherUpgradeable.EnclaveImageStructOutput], "view">;

  grantRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  hasRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;

  initialize: TypedContractMethod<
    [_admin: AddressLike, initWhitelistImages: AttestationAutherUpgradeable.EnclaveImageStruct[]],
    [void],
    "nonpayable"
  >;

  isImageInFamily: TypedContractMethod<[imageId: BytesLike, family: BytesLike], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  pub_key: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [string], "view">;

  removeEnclaveImageFromFamily: TypedContractMethod<[imageId: BytesLike, family: BytesLike], [void], "nonpayable">;

  removePubkey: TypedContractMethod<[keyOwner: AddressLike, keyIndex: BigNumberish], [void], "nonpayable">;

  renounceRole: TypedContractMethod<[role: BytesLike, callerConfirmation: AddressLike], [void], "nonpayable">;

  revokeRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  updatePubkey: TypedContractMethod<
    [keyOwner: AddressLike, keyIndex: BigNumberish, pubkey: BytesLike, attestation_data: BytesLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<[newImplementation: AddressLike, data: BytesLike], [void], "payable">;

  verifyEnclaveKey: TypedContractMethod<
    [signature: BytesLike, attestation: IAttestationVerifier.AttestationStruct],
    [boolean],
    "nonpayable"
  >;

  verifyKey: TypedContractMethod<[attestation_data: BytesLike], [void], "nonpayable">;

  whitelistImageUsingPcrs: TypedContractMethod<[family: BytesLike, pcrs: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "ATTESTATION_MAX_AGE"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "ATTESTATION_VERIFIER"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "KEY_REGISTER_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "MODERATOR_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "UPGRADE_INTERFACE_VERSION"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "addGeneratorRegistry"): TypedContractMethod<[_generatorRegistry: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "allowOnlyVerifiedFamily"): TypedContractMethod<[familyId: BytesLike, _key: AddressLike], [void], "view">;
  getFunction(nameOrSignature: "blackListedImages"): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(nameOrSignature: "blacklistImage"): TypedContractMethod<[imageId: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(nameOrSignature: "getVerifiedKey"): TypedContractMethod<[_key: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedImage",
  ): TypedContractMethod<[_imageId: BytesLike], [AttestationAutherUpgradeable.EnclaveImageStructOutput], "view">;
  getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<
    [_admin: AddressLike, initWhitelistImages: AttestationAutherUpgradeable.EnclaveImageStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "isImageInFamily"): TypedContractMethod<[imageId: BytesLike, family: BytesLike], [boolean], "view">;
  getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "pub_key"): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeEnclaveImageFromFamily",
  ): TypedContractMethod<[imageId: BytesLike, family: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "removePubkey"): TypedContractMethod<[keyOwner: AddressLike, keyIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole",
  ): TypedContractMethod<[role: BytesLike, callerConfirmation: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updatePubkey",
  ): TypedContractMethod<
    [keyOwner: AddressLike, keyIndex: BigNumberish, pubkey: BytesLike, attestation_data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall",
  ): TypedContractMethod<[newImplementation: AddressLike, data: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "verifyEnclaveKey",
  ): TypedContractMethod<[signature: BytesLike, attestation: IAttestationVerifier.AttestationStruct], [boolean], "nonpayable">;
  getFunction(nameOrSignature: "verifyKey"): TypedContractMethod<[attestation_data: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "whitelistImageUsingPcrs"): TypedContractMethod<[family: BytesLike, pcrs: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "EnclaveImageAddedToFamily",
  ): TypedContractEvent<
    EnclaveImageAddedToFamilyEvent.InputTuple,
    EnclaveImageAddedToFamilyEvent.OutputTuple,
    EnclaveImageAddedToFamilyEvent.OutputObject
  >;
  getEvent(
    key: "EnclaveImageRemovedFromFamily",
  ): TypedContractEvent<
    EnclaveImageRemovedFromFamilyEvent.InputTuple,
    EnclaveImageRemovedFromFamilyEvent.OutputTuple,
    EnclaveImageRemovedFromFamilyEvent.OutputObject
  >;
  getEvent(
    key: "EnclaveImageRevoked",
  ): TypedContractEvent<EnclaveImageRevokedEvent.InputTuple, EnclaveImageRevokedEvent.OutputTuple, EnclaveImageRevokedEvent.OutputObject>;
  getEvent(
    key: "EnclaveImageWhitelisted",
  ): TypedContractEvent<
    EnclaveImageWhitelistedEvent.InputTuple,
    EnclaveImageWhitelistedEvent.OutputTuple,
    EnclaveImageWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "EnclaveKeyRevoked",
  ): TypedContractEvent<EnclaveKeyRevokedEvent.InputTuple, EnclaveKeyRevokedEvent.OutputTuple, EnclaveKeyRevokedEvent.OutputObject>;
  getEvent(
    key: "EnclaveKeyVerified",
  ): TypedContractEvent<EnclaveKeyVerifiedEvent.InputTuple, EnclaveKeyVerifiedEvent.OutputTuple, EnclaveKeyVerifiedEvent.OutputObject>;
  getEvent(
    key: "EnclaveKeyWhitelisted",
  ): TypedContractEvent<
    EnclaveKeyWhitelistedEvent.InputTuple,
    EnclaveKeyWhitelistedEvent.OutputTuple,
    EnclaveKeyWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "ImageBlacklisted",
  ): TypedContractEvent<ImageBlacklistedEvent.InputTuple, ImageBlacklistedEvent.OutputTuple, ImageBlacklistedEvent.OutputObject>;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
  getEvent(key: "RemoveKey"): TypedContractEvent<RemoveKeyEvent.InputTuple, RemoveKeyEvent.OutputTuple, RemoveKeyEvent.OutputObject>;
  getEvent(
    key: "RoleAdminChanged",
  ): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
  getEvent(
    key: "RoleGranted",
  ): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
  getEvent(
    key: "RoleRevoked",
  ): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
  getEvent(key: "UpdateKey"): TypedContractEvent<UpdateKeyEvent.InputTuple, UpdateKeyEvent.OutputTuple, UpdateKeyEvent.OutputObject>;
  getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;

  filters: {
    "EnclaveImageAddedToFamily(bytes32,bytes32)": TypedContractEvent<
      EnclaveImageAddedToFamilyEvent.InputTuple,
      EnclaveImageAddedToFamilyEvent.OutputTuple,
      EnclaveImageAddedToFamilyEvent.OutputObject
    >;
    EnclaveImageAddedToFamily: TypedContractEvent<
      EnclaveImageAddedToFamilyEvent.InputTuple,
      EnclaveImageAddedToFamilyEvent.OutputTuple,
      EnclaveImageAddedToFamilyEvent.OutputObject
    >;

    "EnclaveImageRemovedFromFamily(bytes32,bytes32)": TypedContractEvent<
      EnclaveImageRemovedFromFamilyEvent.InputTuple,
      EnclaveImageRemovedFromFamilyEvent.OutputTuple,
      EnclaveImageRemovedFromFamilyEvent.OutputObject
    >;
    EnclaveImageRemovedFromFamily: TypedContractEvent<
      EnclaveImageRemovedFromFamilyEvent.InputTuple,
      EnclaveImageRemovedFromFamilyEvent.OutputTuple,
      EnclaveImageRemovedFromFamilyEvent.OutputObject
    >;

    "EnclaveImageRevoked(bytes32)": TypedContractEvent<
      EnclaveImageRevokedEvent.InputTuple,
      EnclaveImageRevokedEvent.OutputTuple,
      EnclaveImageRevokedEvent.OutputObject
    >;
    EnclaveImageRevoked: TypedContractEvent<
      EnclaveImageRevokedEvent.InputTuple,
      EnclaveImageRevokedEvent.OutputTuple,
      EnclaveImageRevokedEvent.OutputObject
    >;

    "EnclaveImageWhitelisted(bytes32,bytes,bytes,bytes)": TypedContractEvent<
      EnclaveImageWhitelistedEvent.InputTuple,
      EnclaveImageWhitelistedEvent.OutputTuple,
      EnclaveImageWhitelistedEvent.OutputObject
    >;
    EnclaveImageWhitelisted: TypedContractEvent<
      EnclaveImageWhitelistedEvent.InputTuple,
      EnclaveImageWhitelistedEvent.OutputTuple,
      EnclaveImageWhitelistedEvent.OutputObject
    >;

    "EnclaveKeyRevoked(bytes)": TypedContractEvent<
      EnclaveKeyRevokedEvent.InputTuple,
      EnclaveKeyRevokedEvent.OutputTuple,
      EnclaveKeyRevokedEvent.OutputObject
    >;
    EnclaveKeyRevoked: TypedContractEvent<
      EnclaveKeyRevokedEvent.InputTuple,
      EnclaveKeyRevokedEvent.OutputTuple,
      EnclaveKeyRevokedEvent.OutputObject
    >;

    "EnclaveKeyVerified(bytes,bytes32)": TypedContractEvent<
      EnclaveKeyVerifiedEvent.InputTuple,
      EnclaveKeyVerifiedEvent.OutputTuple,
      EnclaveKeyVerifiedEvent.OutputObject
    >;
    EnclaveKeyVerified: TypedContractEvent<
      EnclaveKeyVerifiedEvent.InputTuple,
      EnclaveKeyVerifiedEvent.OutputTuple,
      EnclaveKeyVerifiedEvent.OutputObject
    >;

    "EnclaveKeyWhitelisted(bytes,bytes32)": TypedContractEvent<
      EnclaveKeyWhitelistedEvent.InputTuple,
      EnclaveKeyWhitelistedEvent.OutputTuple,
      EnclaveKeyWhitelistedEvent.OutputObject
    >;
    EnclaveKeyWhitelisted: TypedContractEvent<
      EnclaveKeyWhitelistedEvent.InputTuple,
      EnclaveKeyWhitelistedEvent.OutputTuple,
      EnclaveKeyWhitelistedEvent.OutputObject
    >;

    "ImageBlacklisted(bytes32)": TypedContractEvent<
      ImageBlacklistedEvent.InputTuple,
      ImageBlacklistedEvent.OutputTuple,
      ImageBlacklistedEvent.OutputObject
    >;
    ImageBlacklisted: TypedContractEvent<
      ImageBlacklistedEvent.InputTuple,
      ImageBlacklistedEvent.OutputTuple,
      ImageBlacklistedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;

    "RemoveKey(address,uint256)": TypedContractEvent<RemoveKeyEvent.InputTuple, RemoveKeyEvent.OutputTuple, RemoveKeyEvent.OutputObject>;
    RemoveKey: TypedContractEvent<RemoveKeyEvent.InputTuple, RemoveKeyEvent.OutputTuple, RemoveKeyEvent.OutputObject>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    "UpdateKey(address,uint256)": TypedContractEvent<UpdateKeyEvent.InputTuple, UpdateKeyEvent.OutputTuple, UpdateKeyEvent.OutputObject>;
    UpdateKey: TypedContractEvent<UpdateKeyEvent.InputTuple, UpdateKeyEvent.OutputTuple, UpdateKeyEvent.OutputObject>;

    "Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
  };
}
