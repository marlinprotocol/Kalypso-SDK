/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";

export interface MockVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkSampleInputsAndProof"
      | "proofMarketplace"
      | "sampleInput"
      | "sampleProof"
      | "setProofMarketplaceContract"
      | "verify"
      | "verifyAgainstSampleInputs"
      | "verifyInputs"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "checkSampleInputsAndProof", values?: undefined): string;
  encodeFunctionData(functionFragment: "proofMarketplace", values?: undefined): string;
  encodeFunctionData(functionFragment: "sampleInput", values?: undefined): string;
  encodeFunctionData(functionFragment: "sampleProof", values?: undefined): string;
  encodeFunctionData(functionFragment: "setProofMarketplaceContract", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "verify", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "verifyAgainstSampleInputs", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "verifyInputs", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "checkSampleInputsAndProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofMarketplace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sampleInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sampleProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setProofMarketplaceContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyAgainstSampleInputs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyInputs", data: BytesLike): Result;
}

export interface MockVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): MockVerifier;
  waitForDeployment(): Promise<this>;

  interface: MockVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  checkSampleInputsAndProof: TypedContractMethod<[], [boolean], "view">;

  proofMarketplace: TypedContractMethod<[], [string], "view">;

  sampleInput: TypedContractMethod<[], [string], "view">;

  sampleProof: TypedContractMethod<[], [string], "view">;

  setProofMarketplaceContract: TypedContractMethod<[_proofMarketplace: AddressLike], [void], "nonpayable">;

  verify: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifyAgainstSampleInputs: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifyInputs: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "checkSampleInputsAndProof"): TypedContractMethod<[], [boolean], "view">;
  getFunction(nameOrSignature: "proofMarketplace"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "sampleInput"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "sampleProof"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "setProofMarketplaceContract"): TypedContractMethod<[_proofMarketplace: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "verify"): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(nameOrSignature: "verifyAgainstSampleInputs"): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(nameOrSignature: "verifyInputs"): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  filters: {};
}
