/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IBattleshipGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "HIT_MAX"
      | "firstTurn"
      | "gameIndex"
      | "gameState"
      | "games"
      | "isTrustedForwarder"
      | "joinGame"
      | "leaveGame"
      | "newGame"
      | "playing"
      | "trustedForwarder"
      | "turn"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Joined" | "Left" | "Report" | "Shot" | "Started" | "Won"): EventFragment;

  encodeFunctionData(functionFragment: "HIT_MAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "firstTurn", values: [BigNumberish, [BigNumberish, BigNumberish]]): string;
  encodeFunctionData(functionFragment: "gameIndex", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameState", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "isTrustedForwarder", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "joinGame", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "leaveGame", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "newGame", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "playing", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "trustedForwarder", values?: undefined): string;
  encodeFunctionData(functionFragment: "turn", values: [BigNumberish, [BigNumberish, BigNumberish], BytesLike]): string;

  decodeFunctionResult(functionFragment: "HIT_MAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstTurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTrustedForwarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trustedForwarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "turn", data: BytesLike): Result;
}

export namespace JoinedEvent {
  export type InputTuple = [_nonce: BigNumberish, _by: AddressLike];
  export type OutputTuple = [_nonce: bigint, _by: string];
  export interface OutputObject {
    _nonce: bigint;
    _by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeftEvent {
  export type InputTuple = [_by: AddressLike, _nonce: BigNumberish];
  export type OutputTuple = [_by: string, _nonce: bigint];
  export interface OutputObject {
    _by: string;
    _nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportEvent {
  export type InputTuple = [hit: boolean, _game: BigNumberish];
  export type OutputTuple = [hit: boolean, _game: bigint];
  export interface OutputObject {
    hit: boolean;
    _game: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShotEvent {
  export type InputTuple = [_x: BigNumberish, _y: BigNumberish, _game: BigNumberish];
  export type OutputTuple = [_x: bigint, _y: bigint, _game: bigint];
  export interface OutputObject {
    _x: bigint;
    _y: bigint;
    _game: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartedEvent {
  export type InputTuple = [_nonce: BigNumberish, _by: AddressLike];
  export type OutputTuple = [_nonce: bigint, _by: string];
  export interface OutputObject {
    _nonce: bigint;
    _by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WonEvent {
  export type InputTuple = [_winner: AddressLike, _nonce: BigNumberish];
  export type OutputTuple = [_winner: string, _nonce: bigint];
  export interface OutputObject {
    _winner: string;
    _nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBattleshipGame extends BaseContract {
  connect(runner?: ContractRunner | null): IBattleshipGame;
  waitForDeployment(): Promise<this>;

  interface: IBattleshipGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  HIT_MAX: TypedContractMethod<[], [bigint], "view">;

  firstTurn: TypedContractMethod<[_game: BigNumberish, _shot: [BigNumberish, BigNumberish]], [void], "nonpayable">;

  gameIndex: TypedContractMethod<[], [bigint], "view">;

  gameState: TypedContractMethod<
    [_game: BigNumberish],
    [
      [[string, string], [string, string], bigint, [bigint, bigint], bigint, string] & {
        _participants: [string, string];
        _boards: [string, string];
        _turnNonce: bigint;
        _hitNonce: [bigint, bigint];
        _status: bigint;
        _winner: string;
      }
    ],
    "view"
  >;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        nonce: bigint;
        status: bigint;
        winner: string;
      }
    ],
    "view"
  >;

  isTrustedForwarder: TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;

  joinGame: TypedContractMethod<[_game: BigNumberish, _proof: BytesLike], [void], "nonpayable">;

  leaveGame: TypedContractMethod<[_game: BigNumberish], [void], "nonpayable">;

  newGame: TypedContractMethod<[_proof: BytesLike], [void], "nonpayable">;

  playing: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  trustedForwarder: TypedContractMethod<[], [string], "view">;

  turn: TypedContractMethod<[_game: BigNumberish, _next: [BigNumberish, BigNumberish], _proof: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "HIT_MAX"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "firstTurn"
  ): TypedContractMethod<[_game: BigNumberish, _shot: [BigNumberish, BigNumberish]], [void], "nonpayable">;
  getFunction(nameOrSignature: "gameIndex"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "gameState"): TypedContractMethod<
    [_game: BigNumberish],
    [
      [[string, string], [string, string], bigint, [bigint, bigint], bigint, string] & {
        _participants: [string, string];
        _boards: [string, string];
        _turnNonce: bigint;
        _hitNonce: [bigint, bigint];
        _status: bigint;
        _winner: string;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "games"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        nonce: bigint;
        status: bigint;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "isTrustedForwarder"): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(nameOrSignature: "joinGame"): TypedContractMethod<[_game: BigNumberish, _proof: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "leaveGame"): TypedContractMethod<[_game: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "newGame"): TypedContractMethod<[_proof: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "playing"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(nameOrSignature: "trustedForwarder"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "turn"
  ): TypedContractMethod<[_game: BigNumberish, _next: [BigNumberish, BigNumberish], _proof: BytesLike], [void], "nonpayable">;

  getEvent(key: "Joined"): TypedContractEvent<JoinedEvent.InputTuple, JoinedEvent.OutputTuple, JoinedEvent.OutputObject>;
  getEvent(key: "Left"): TypedContractEvent<LeftEvent.InputTuple, LeftEvent.OutputTuple, LeftEvent.OutputObject>;
  getEvent(key: "Report"): TypedContractEvent<ReportEvent.InputTuple, ReportEvent.OutputTuple, ReportEvent.OutputObject>;
  getEvent(key: "Shot"): TypedContractEvent<ShotEvent.InputTuple, ShotEvent.OutputTuple, ShotEvent.OutputObject>;
  getEvent(key: "Started"): TypedContractEvent<StartedEvent.InputTuple, StartedEvent.OutputTuple, StartedEvent.OutputObject>;
  getEvent(key: "Won"): TypedContractEvent<WonEvent.InputTuple, WonEvent.OutputTuple, WonEvent.OutputObject>;

  filters: {
    "Joined(uint256,address)": TypedContractEvent<JoinedEvent.InputTuple, JoinedEvent.OutputTuple, JoinedEvent.OutputObject>;
    Joined: TypedContractEvent<JoinedEvent.InputTuple, JoinedEvent.OutputTuple, JoinedEvent.OutputObject>;

    "Left(address,uint256)": TypedContractEvent<LeftEvent.InputTuple, LeftEvent.OutputTuple, LeftEvent.OutputObject>;
    Left: TypedContractEvent<LeftEvent.InputTuple, LeftEvent.OutputTuple, LeftEvent.OutputObject>;

    "Report(bool,uint256)": TypedContractEvent<ReportEvent.InputTuple, ReportEvent.OutputTuple, ReportEvent.OutputObject>;
    Report: TypedContractEvent<ReportEvent.InputTuple, ReportEvent.OutputTuple, ReportEvent.OutputObject>;

    "Shot(uint256,uint256,uint256)": TypedContractEvent<ShotEvent.InputTuple, ShotEvent.OutputTuple, ShotEvent.OutputObject>;
    Shot: TypedContractEvent<ShotEvent.InputTuple, ShotEvent.OutputTuple, ShotEvent.OutputObject>;

    "Started(uint256,address)": TypedContractEvent<StartedEvent.InputTuple, StartedEvent.OutputTuple, StartedEvent.OutputObject>;
    Started: TypedContractEvent<StartedEvent.InputTuple, StartedEvent.OutputTuple, StartedEvent.OutputObject>;

    "Won(address,uint256)": TypedContractEvent<WonEvent.InputTuple, WonEvent.OutputTuple, WonEvent.OutputObject>;
    Won: TypedContractEvent<WonEvent.InputTuple, WonEvent.OutputTuple, WonEvent.OutputObject>;
  };
}
