/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ProofMarketplace {
  export type AskStruct = {
    marketId: BigNumberish;
    reward: BigNumberish;
    expiry: BigNumberish;
    timeTakenForProofGeneration: BigNumberish;
    deadline: BigNumberish;
    refundAddress: AddressLike;
    proverData: BytesLike;
  };

  export type AskStructOutput = [
    marketId: bigint,
    reward: bigint,
    expiry: bigint,
    timeTakenForProofGeneration: bigint,
    deadline: bigint,
    refundAddress: string,
    proverData: string
  ] & {
    marketId: bigint;
    reward: bigint;
    expiry: bigint;
    timeTakenForProofGeneration: bigint;
    deadline: bigint;
    refundAddress: string;
    proverData: string;
  };
}

export interface ProofMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ENTITY_KEY_REGISTRY"
      | "GENERATOR_REGISTRY"
      | "MARKET_ACTIVATION_DELAY"
      | "MARKET_CREATION_COST"
      | "MATCHING_ENGINE_ROLE"
      | "PAYMENT_TOKEN"
      | "UPDATER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "addExtraImages"
      | "askCounter"
      | "assignTask"
      | "cancelAsk"
      | "claimableAmount"
      | "costPerInputBytes"
      | "createAsk"
      | "createMarketplace"
      | "discardRequest"
      | "flush"
      | "freezeMarket"
      | "getAskState"
      | "getPlatformFee"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "listOfAsk"
      | "marketCounter"
      | "marketData"
      | "minProvingTime"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "relayBatchAssignTasks"
      | "removeExtraImages"
      | "renounceRole"
      | "revokeRole"
      | "setMatchingEngineImage"
      | "slashGenerator"
      | "submitProof"
      | "submitProofForInvalidInputs"
      | "submitProofs"
      | "supportsInterface"
      | "unpause"
      | "updateCostPerBytes"
      | "updateMinProvingTime"
      | "upgradeToAndCall"
      | "verifyMatchingEngine"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddExtraIVSImage"
      | "AddExtraProverImage"
      | "AskCancelled"
      | "AskCreated"
      | "Initialized"
      | "InvalidInputsDetected"
      | "MarketplaceCreated"
      | "Paused"
      | "ProofCreated"
      | "ProofNotGenerated"
      | "RemoveExtraIVSImage"
      | "RemoveExtraProverImage"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TaskCreated"
      | "Unpaused"
      | "UpdateCostPerBytes"
      | "UpdateMinProvingTime"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ENTITY_KEY_REGISTRY", values?: undefined): string;
  encodeFunctionData(functionFragment: "GENERATOR_REGISTRY", values?: undefined): string;
  encodeFunctionData(functionFragment: "MARKET_ACTIVATION_DELAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "MARKET_CREATION_COST", values?: undefined): string;
  encodeFunctionData(functionFragment: "MATCHING_ENGINE_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PAYMENT_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "UPDATER_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "addExtraImages", values: [BigNumberish, BytesLike[], BytesLike[]]): string;
  encodeFunctionData(functionFragment: "askCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "assignTask", values: [BigNumberish, AddressLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "cancelAsk", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "claimableAmount", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "costPerInputBytes", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "createAsk", values: [ProofMarketplace.AskStruct, BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "createMarketplace", values: [BytesLike, AddressLike, BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "discardRequest", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "flush", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "freezeMarket", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getAskState", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getPlatformFee", values: [BigNumberish, ProofMarketplace.AskStruct, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "initialize", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "listOfAsk", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "marketCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "marketData", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "minProvingTime", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
  encodeFunctionData(functionFragment: "relayBatchAssignTasks", values: [BigNumberish[], AddressLike[], BytesLike[], BytesLike]): string;
  encodeFunctionData(functionFragment: "removeExtraImages", values: [BigNumberish, BytesLike[], BytesLike[]]): string;
  encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "setMatchingEngineImage", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "slashGenerator", values: [BigNumberish, AddressLike]): string;
  encodeFunctionData(functionFragment: "submitProof", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "submitProofForInvalidInputs", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "submitProofs", values: [BigNumberish[], BytesLike[]]): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "updateCostPerBytes", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "updateMinProvingTime", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "verifyMatchingEngine", values: [BytesLike, BytesLike]): string;

  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ENTITY_KEY_REGISTRY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GENERATOR_REGISTRY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MARKET_ACTIVATION_DELAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MARKET_CREATION_COST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MATCHING_ENGINE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PAYMENT_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UPDATER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addExtraImages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "askCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assignTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimableAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "costPerInputBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createMarketplace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "discardRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freezeMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAskState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlatformFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listOfAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minProvingTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayBatchAssignTasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeExtraImages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMatchingEngineImage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slashGenerator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitProofForInvalidInputs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitProofs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateCostPerBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateMinProvingTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyMatchingEngine", data: BytesLike): Result;
}

export namespace AddExtraIVSImageEvent {
  export type InputTuple = [marketId: BigNumberish, imageId: BytesLike];
  export type OutputTuple = [marketId: bigint, imageId: string];
  export interface OutputObject {
    marketId: bigint;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddExtraProverImageEvent {
  export type InputTuple = [marketId: BigNumberish, imageId: BytesLike];
  export type OutputTuple = [marketId: bigint, imageId: string];
  export interface OutputObject {
    marketId: bigint;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AskCancelledEvent {
  export type InputTuple = [askId: BigNumberish];
  export type OutputTuple = [askId: bigint];
  export interface OutputObject {
    askId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AskCreatedEvent {
  export type InputTuple = [askId: BigNumberish, hasPrivateInputs: boolean, secret_data: BytesLike, acl: BytesLike];
  export type OutputTuple = [askId: bigint, hasPrivateInputs: boolean, secret_data: string, acl: string];
  export interface OutputObject {
    askId: bigint;
    hasPrivateInputs: boolean;
    secret_data: string;
    acl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvalidInputsDetectedEvent {
  export type InputTuple = [askId: BigNumberish];
  export type OutputTuple = [askId: bigint];
  export interface OutputObject {
    askId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceCreatedEvent {
  export type InputTuple = [marketId: BigNumberish];
  export type OutputTuple = [marketId: bigint];
  export interface OutputObject {
    marketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofCreatedEvent {
  export type InputTuple = [askId: BigNumberish, proof: BytesLike];
  export type OutputTuple = [askId: bigint, proof: string];
  export interface OutputObject {
    askId: bigint;
    proof: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofNotGeneratedEvent {
  export type InputTuple = [askId: BigNumberish];
  export type OutputTuple = [askId: bigint];
  export interface OutputObject {
    askId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveExtraIVSImageEvent {
  export type InputTuple = [marketId: BigNumberish, imageId: BytesLike];
  export type OutputTuple = [marketId: bigint, imageId: string];
  export interface OutputObject {
    marketId: bigint;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveExtraProverImageEvent {
  export type InputTuple = [marketId: BigNumberish, imageId: BytesLike];
  export type OutputTuple = [marketId: bigint, imageId: string];
  export interface OutputObject {
    marketId: bigint;
    imageId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
  export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [askId: BigNumberish, generator: AddressLike, new_acl: BytesLike];
  export type OutputTuple = [askId: bigint, generator: string, new_acl: string];
  export interface OutputObject {
    askId: bigint;
    generator: string;
    new_acl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCostPerBytesEvent {
  export type InputTuple = [secretType: BigNumberish, costPerInputBytes: BigNumberish];
  export type OutputTuple = [secretType: bigint, costPerInputBytes: bigint];
  export interface OutputObject {
    secretType: bigint;
    costPerInputBytes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinProvingTimeEvent {
  export type InputTuple = [secretType: BigNumberish, newProvingTime: BigNumberish];
  export type OutputTuple = [secretType: bigint, newProvingTime: bigint];
  export interface OutputObject {
    secretType: bigint;
    newProvingTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProofMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): ProofMarketplace;
  waitForDeployment(): Promise<this>;

  interface: ProofMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ENTITY_KEY_REGISTRY: TypedContractMethod<[], [string], "view">;

  GENERATOR_REGISTRY: TypedContractMethod<[], [string], "view">;

  MARKET_ACTIVATION_DELAY: TypedContractMethod<[], [bigint], "view">;

  MARKET_CREATION_COST: TypedContractMethod<[], [bigint], "view">;

  MATCHING_ENGINE_ROLE: TypedContractMethod<[], [string], "view">;

  PAYMENT_TOKEN: TypedContractMethod<[], [string], "view">;

  UPDATER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addExtraImages: TypedContractMethod<[marketId: BigNumberish, _proverPcrs: BytesLike[], _ivsPcrs: BytesLike[]], [void], "nonpayable">;

  askCounter: TypedContractMethod<[], [bigint], "view">;

  assignTask: TypedContractMethod<[askId: BigNumberish, generator: AddressLike, new_acl: BytesLike], [void], "nonpayable">;

  cancelAsk: TypedContractMethod<[askId: BigNumberish], [void], "nonpayable">;

  claimableAmount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  costPerInputBytes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  createAsk: TypedContractMethod<
    [ask: ProofMarketplace.AskStruct, secretType: BigNumberish, privateInputs: BytesLike, acl: BytesLike],
    [void],
    "nonpayable"
  >;

  createMarketplace: TypedContractMethod<
    [_marketmetadata: BytesLike, _verifier: AddressLike, _penalty: BigNumberish, _proverPcrs: BytesLike, _ivsPcrs: BytesLike],
    [void],
    "nonpayable"
  >;

  discardRequest: TypedContractMethod<[askId: BigNumberish], [bigint], "nonpayable">;

  flush: TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;

  freezeMarket: TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;

  getAskState: TypedContractMethod<[askId: BigNumberish], [bigint], "view">;

  getPlatformFee: TypedContractMethod<
    [secretType: BigNumberish, ask: ProofMarketplace.AskStruct, privateInputs: BytesLike, acl: BytesLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  hasRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;

  initialize: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  listOfAsk: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [ProofMarketplace.AskStructOutput, bigint, string, string] & {
        ask: ProofMarketplace.AskStructOutput;
        state: bigint;
        requester: string;
        generator: string;
      }
    ],
    "view"
  >;

  marketCounter: TypedContractMethod<[], [bigint], "view">;

  marketData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, string, string] & {
        verifier: string;
        proverImageId: string;
        slashingPenalty: bigint;
        activationBlock: bigint;
        ivsImageId: string;
        creator: string;
        marketmetadata: string;
      }
    ],
    "view"
  >;

  minProvingTime: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  relayBatchAssignTasks: TypedContractMethod<
    [askIds: BigNumberish[], generators: AddressLike[], newAcls: BytesLike[], signature: BytesLike],
    [void],
    "nonpayable"
  >;

  removeExtraImages: TypedContractMethod<[marketId: BigNumberish, _proverPcrs: BytesLike[], _ivsPcrs: BytesLike[]], [void], "nonpayable">;

  renounceRole: TypedContractMethod<[role: BytesLike, callerConfirmation: AddressLike], [void], "nonpayable">;

  revokeRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  setMatchingEngineImage: TypedContractMethod<[pcrs: BytesLike], [void], "nonpayable">;

  slashGenerator: TypedContractMethod<[askId: BigNumberish, rewardAddress: AddressLike], [bigint], "nonpayable">;

  submitProof: TypedContractMethod<[askId: BigNumberish, proof: BytesLike], [void], "nonpayable">;

  submitProofForInvalidInputs: TypedContractMethod<[askId: BigNumberish, invalidProofSignature: BytesLike], [void], "nonpayable">;

  submitProofs: TypedContractMethod<[taskIds: BigNumberish[], proofs: BytesLike[]], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCostPerBytes: TypedContractMethod<[secretType: BigNumberish, costPerByte: BigNumberish], [void], "nonpayable">;

  updateMinProvingTime: TypedContractMethod<[secretType: BigNumberish, newProvingTime: BigNumberish], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<[newImplementation: AddressLike, data: BytesLike], [void], "payable">;

  verifyMatchingEngine: TypedContractMethod<[attestationData: BytesLike, meSignature: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ENTITY_KEY_REGISTRY"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "GENERATOR_REGISTRY"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "MARKET_ACTIVATION_DELAY"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "MARKET_CREATION_COST"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "MATCHING_ENGINE_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "PAYMENT_TOKEN"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "UPDATER_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "UPGRADE_INTERFACE_VERSION"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addExtraImages"
  ): TypedContractMethod<[marketId: BigNumberish, _proverPcrs: BytesLike[], _ivsPcrs: BytesLike[]], [void], "nonpayable">;
  getFunction(nameOrSignature: "askCounter"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assignTask"
  ): TypedContractMethod<[askId: BigNumberish, generator: AddressLike, new_acl: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "cancelAsk"): TypedContractMethod<[askId: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "claimableAmount"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(nameOrSignature: "costPerInputBytes"): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createAsk"
  ): TypedContractMethod<
    [ask: ProofMarketplace.AskStruct, secretType: BigNumberish, privateInputs: BytesLike, acl: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMarketplace"
  ): TypedContractMethod<
    [_marketmetadata: BytesLike, _verifier: AddressLike, _penalty: BigNumberish, _proverPcrs: BytesLike, _ivsPcrs: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "discardRequest"): TypedContractMethod<[askId: BigNumberish], [bigint], "nonpayable">;
  getFunction(nameOrSignature: "flush"): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "freezeMarket"): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "getAskState"): TypedContractMethod<[askId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlatformFee"
  ): TypedContractMethod<
    [secretType: BigNumberish, ask: ProofMarketplace.AskStruct, privateInputs: BytesLike, acl: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;
  getFunction(nameOrSignature: "initialize"): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "listOfAsk"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [ProofMarketplace.AskStructOutput, bigint, string, string] & {
        ask: ProofMarketplace.AskStructOutput;
        state: bigint;
        requester: string;
        generator: string;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "marketCounter"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "marketData"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, string, string] & {
        verifier: string;
        proverImageId: string;
        slashingPenalty: bigint;
        activationBlock: bigint;
        ivsImageId: string;
        creator: string;
        marketmetadata: string;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "minProvingTime"): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(nameOrSignature: "pause"): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
  getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayBatchAssignTasks"
  ): TypedContractMethod<
    [askIds: BigNumberish[], generators: AddressLike[], newAcls: BytesLike[], signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeExtraImages"
  ): TypedContractMethod<[marketId: BigNumberish, _proverPcrs: BytesLike[], _ivsPcrs: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<[role: BytesLike, callerConfirmation: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "setMatchingEngineImage"): TypedContractMethod<[pcrs: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slashGenerator"
  ): TypedContractMethod<[askId: BigNumberish, rewardAddress: AddressLike], [bigint], "nonpayable">;
  getFunction(nameOrSignature: "submitProof"): TypedContractMethod<[askId: BigNumberish, proof: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitProofForInvalidInputs"
  ): TypedContractMethod<[askId: BigNumberish, invalidProofSignature: BytesLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "submitProofs"): TypedContractMethod<[taskIds: BigNumberish[], proofs: BytesLike[]], [void], "nonpayable">;
  getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(nameOrSignature: "unpause"): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCostPerBytes"
  ): TypedContractMethod<[secretType: BigNumberish, costPerByte: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinProvingTime"
  ): TypedContractMethod<[secretType: BigNumberish, newProvingTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<[newImplementation: AddressLike, data: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "verifyMatchingEngine"
  ): TypedContractMethod<[attestationData: BytesLike, meSignature: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "AddExtraIVSImage"
  ): TypedContractEvent<AddExtraIVSImageEvent.InputTuple, AddExtraIVSImageEvent.OutputTuple, AddExtraIVSImageEvent.OutputObject>;
  getEvent(
    key: "AddExtraProverImage"
  ): TypedContractEvent<AddExtraProverImageEvent.InputTuple, AddExtraProverImageEvent.OutputTuple, AddExtraProverImageEvent.OutputObject>;
  getEvent(
    key: "AskCancelled"
  ): TypedContractEvent<AskCancelledEvent.InputTuple, AskCancelledEvent.OutputTuple, AskCancelledEvent.OutputObject>;
  getEvent(key: "AskCreated"): TypedContractEvent<AskCreatedEvent.InputTuple, AskCreatedEvent.OutputTuple, AskCreatedEvent.OutputObject>;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
  getEvent(
    key: "InvalidInputsDetected"
  ): TypedContractEvent<
    InvalidInputsDetectedEvent.InputTuple,
    InvalidInputsDetectedEvent.OutputTuple,
    InvalidInputsDetectedEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceCreated"
  ): TypedContractEvent<MarketplaceCreatedEvent.InputTuple, MarketplaceCreatedEvent.OutputTuple, MarketplaceCreatedEvent.OutputObject>;
  getEvent(key: "Paused"): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: "ProofCreated"
  ): TypedContractEvent<ProofCreatedEvent.InputTuple, ProofCreatedEvent.OutputTuple, ProofCreatedEvent.OutputObject>;
  getEvent(
    key: "ProofNotGenerated"
  ): TypedContractEvent<ProofNotGeneratedEvent.InputTuple, ProofNotGeneratedEvent.OutputTuple, ProofNotGeneratedEvent.OutputObject>;
  getEvent(
    key: "RemoveExtraIVSImage"
  ): TypedContractEvent<RemoveExtraIVSImageEvent.InputTuple, RemoveExtraIVSImageEvent.OutputTuple, RemoveExtraIVSImageEvent.OutputObject>;
  getEvent(
    key: "RemoveExtraProverImage"
  ): TypedContractEvent<
    RemoveExtraProverImageEvent.InputTuple,
    RemoveExtraProverImageEvent.OutputTuple,
    RemoveExtraProverImageEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<TaskCreatedEvent.InputTuple, TaskCreatedEvent.OutputTuple, TaskCreatedEvent.OutputObject>;
  getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
  getEvent(
    key: "UpdateCostPerBytes"
  ): TypedContractEvent<UpdateCostPerBytesEvent.InputTuple, UpdateCostPerBytesEvent.OutputTuple, UpdateCostPerBytesEvent.OutputObject>;
  getEvent(
    key: "UpdateMinProvingTime"
  ): TypedContractEvent<
    UpdateMinProvingTimeEvent.InputTuple,
    UpdateMinProvingTimeEvent.OutputTuple,
    UpdateMinProvingTimeEvent.OutputObject
  >;
  getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;

  filters: {
    "AddExtraIVSImage(uint256,bytes32)": TypedContractEvent<
      AddExtraIVSImageEvent.InputTuple,
      AddExtraIVSImageEvent.OutputTuple,
      AddExtraIVSImageEvent.OutputObject
    >;
    AddExtraIVSImage: TypedContractEvent<
      AddExtraIVSImageEvent.InputTuple,
      AddExtraIVSImageEvent.OutputTuple,
      AddExtraIVSImageEvent.OutputObject
    >;

    "AddExtraProverImage(uint256,bytes32)": TypedContractEvent<
      AddExtraProverImageEvent.InputTuple,
      AddExtraProverImageEvent.OutputTuple,
      AddExtraProverImageEvent.OutputObject
    >;
    AddExtraProverImage: TypedContractEvent<
      AddExtraProverImageEvent.InputTuple,
      AddExtraProverImageEvent.OutputTuple,
      AddExtraProverImageEvent.OutputObject
    >;

    "AskCancelled(uint256)": TypedContractEvent<
      AskCancelledEvent.InputTuple,
      AskCancelledEvent.OutputTuple,
      AskCancelledEvent.OutputObject
    >;
    AskCancelled: TypedContractEvent<AskCancelledEvent.InputTuple, AskCancelledEvent.OutputTuple, AskCancelledEvent.OutputObject>;

    "AskCreated(uint256,bool,bytes,bytes)": TypedContractEvent<
      AskCreatedEvent.InputTuple,
      AskCreatedEvent.OutputTuple,
      AskCreatedEvent.OutputObject
    >;
    AskCreated: TypedContractEvent<AskCreatedEvent.InputTuple, AskCreatedEvent.OutputTuple, AskCreatedEvent.OutputObject>;

    "Initialized(uint64)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;

    "InvalidInputsDetected(uint256)": TypedContractEvent<
      InvalidInputsDetectedEvent.InputTuple,
      InvalidInputsDetectedEvent.OutputTuple,
      InvalidInputsDetectedEvent.OutputObject
    >;
    InvalidInputsDetected: TypedContractEvent<
      InvalidInputsDetectedEvent.InputTuple,
      InvalidInputsDetectedEvent.OutputTuple,
      InvalidInputsDetectedEvent.OutputObject
    >;

    "MarketplaceCreated(uint256)": TypedContractEvent<
      MarketplaceCreatedEvent.InputTuple,
      MarketplaceCreatedEvent.OutputTuple,
      MarketplaceCreatedEvent.OutputObject
    >;
    MarketplaceCreated: TypedContractEvent<
      MarketplaceCreatedEvent.InputTuple,
      MarketplaceCreatedEvent.OutputTuple,
      MarketplaceCreatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;

    "ProofCreated(uint256,bytes)": TypedContractEvent<
      ProofCreatedEvent.InputTuple,
      ProofCreatedEvent.OutputTuple,
      ProofCreatedEvent.OutputObject
    >;
    ProofCreated: TypedContractEvent<ProofCreatedEvent.InputTuple, ProofCreatedEvent.OutputTuple, ProofCreatedEvent.OutputObject>;

    "ProofNotGenerated(uint256)": TypedContractEvent<
      ProofNotGeneratedEvent.InputTuple,
      ProofNotGeneratedEvent.OutputTuple,
      ProofNotGeneratedEvent.OutputObject
    >;
    ProofNotGenerated: TypedContractEvent<
      ProofNotGeneratedEvent.InputTuple,
      ProofNotGeneratedEvent.OutputTuple,
      ProofNotGeneratedEvent.OutputObject
    >;

    "RemoveExtraIVSImage(uint256,bytes32)": TypedContractEvent<
      RemoveExtraIVSImageEvent.InputTuple,
      RemoveExtraIVSImageEvent.OutputTuple,
      RemoveExtraIVSImageEvent.OutputObject
    >;
    RemoveExtraIVSImage: TypedContractEvent<
      RemoveExtraIVSImageEvent.InputTuple,
      RemoveExtraIVSImageEvent.OutputTuple,
      RemoveExtraIVSImageEvent.OutputObject
    >;

    "RemoveExtraProverImage(uint256,bytes32)": TypedContractEvent<
      RemoveExtraProverImageEvent.InputTuple,
      RemoveExtraProverImageEvent.OutputTuple,
      RemoveExtraProverImageEvent.OutputObject
    >;
    RemoveExtraProverImage: TypedContractEvent<
      RemoveExtraProverImageEvent.InputTuple,
      RemoveExtraProverImageEvent.OutputTuple,
      RemoveExtraProverImageEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    "TaskCreated(uint256,address,bytes)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<TaskCreatedEvent.InputTuple, TaskCreatedEvent.OutputTuple, TaskCreatedEvent.OutputObject>;

    "Unpaused(address)": TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    "UpdateCostPerBytes(uint8,uint256)": TypedContractEvent<
      UpdateCostPerBytesEvent.InputTuple,
      UpdateCostPerBytesEvent.OutputTuple,
      UpdateCostPerBytesEvent.OutputObject
    >;
    UpdateCostPerBytes: TypedContractEvent<
      UpdateCostPerBytesEvent.InputTuple,
      UpdateCostPerBytesEvent.OutputTuple,
      UpdateCostPerBytesEvent.OutputObject
    >;

    "UpdateMinProvingTime(uint8,uint256)": TypedContractEvent<
      UpdateMinProvingTimeEvent.InputTuple,
      UpdateMinProvingTimeEvent.OutputTuple,
      UpdateMinProvingTimeEvent.OutputObject
    >;
    UpdateMinProvingTime: TypedContractEvent<
      UpdateMinProvingTimeEvent.InputTuple,
      UpdateMinProvingTimeEvent.OutputTuple,
      UpdateMinProvingTimeEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
  };
}
